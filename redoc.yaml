openapi: 3.0.0
info:
  title: DIGILAB API
  version: 1.0.1
  description: >-
    API for managing manuscript, 3D models, textures, annotations, and poses in DIGILAB.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://127.0.0.1:4010
    description: Dummy Server
x-tagGroups:
  - name: "xtagIoT"
    x-displayName: IoT Integrations
    tags:
      - "tagSENNSE"
  - name: "xtag3DAnnotation"
    x-displayName: 3D Annotations
    tags:
      - "tag3DAnnotation"
      - "tag3DAnnotation/{id}/annotations"
      - "tag3DAnnotation/{id}/3d-models"
  - name: "xtagAnnotation"
    x-displayName: Annotations
    tags:
      - "tagAnnotation"
  - name: "xtagEvents"
    x-displayName: Events
    tags:
      - "tagEvents"
      - "tagLocationsOfEvents"
  - name: "xtagIlluminatedScene"
    x-displayName: Illuminated Scene
    tags:
      - "tagIlluminatedScene"
      - "tagIlluminatedScene/{id}/3d-annotations"
      - "tagIlluminatedScene/{id}/poses"
      - "tagIlluminatedScene/{id}/authors"
      - "tagIlluminatedScene/{id}/editors"
  - name: "xtagLocations"
    x-displayName: Locations
    tags:
      - "tagLocations"
  - name: "xtagManuscripts"
    x-displayName: Manuscripts
    tags:
      - "tagManuscripts"
      - "tagManuscriptContents"
      - "tagManuscripts/{id}/locations"
      - "tagManuscripts/{id}/authors"
      - "tagManuscripts/{id}/editors"
      - "tagManuscripts/{id}/illuminated-scenes"
  - name: "xtagPersons"
    x-displayName: Persons
    tags:
      - "tagPersons"
  - name: "xtagPose"
    x-displayName: poses
    tags:
      - "tagPosa3D"
      - "tagPosa3D/{id}/3d-models"
      - "tagPosa3D/{id}/contents"
  - name: "xtagProjects"
    x-displayName: Projects
    tags:
      - "tagProjects"
  - name: "xtagTexture"
    x-displayName: Texture
    tags:
      - "tagTexture"
  - name: "xtagAuthor"
    x-displayName: Authors
    tags:
      - "tagAuthor"
  - name: "xtagEditors"
    x-displayName: Editors
    tags:
      - "tagEditors"
  - name: "xtagModels"
    x-displayName: Models
    tags:
      - "Models"
tags:
  - name: tagSENNSE
    x-displayName: SENNSE (IoT)
    description: |
      Integrazione IoT basata su Thingsboard. Endpoint per l'import di pacchetti
      (dataset + metadati + annotazioni) da SENNSE verso DIGILAB.
  - name: authentication
    x-displayName: Autenticazione OAuth
    description: |
      L’API supporta il protocollo OAuth 2.0 per l’autenticazione e l’autorizzazione degli utenti, garantendo un accesso sicuro alle risorse protette. OAuth2 è un framework standard che consente alle applicazioni client di ottenere token di accesso senza esporre le credenziali degli utenti.

      **Flussi di Autenticazione Supportati**

      L’API implementa diversi flussi di autenticazione OAuth2 per adattarsi a diverse esigenze applicative:
        - Authorization Code Flow (raccomandato per applicazioni server-side)
        - Implicit Flow (per applicazioni client-side, sconsigliato per nuovi sviluppi)
        - Client Credentials Flow (per autenticazione tra servizi senza interazione utente)
        - Password Grant Flow (per applicazioni di prima parte che gestiscono direttamente le credenziali utente)
        - Device Authorization Flow (per dispositivi senza input diretto, come smart TV e IoT)

      **Endpoint di Autenticazione**

      L’API fornisce i seguenti endpoint per gestire il processo di autenticazione e autorizzazione:
        
        - **/token**: Ottieni un token di accesso ed un refresh token
        - **/authorize**: Ottieni un codice di autorizzazione per l’accesso a risorse protette
        - **/revoke**: Revoca un token di accesso o di aggiornamento
        - **/refresh**: Aggiorna un token di accesso
        - **/userinfo**: Ottieni informazioni sull’utente autenticato

      **Gestione dei Token**

      I token OAuth ([OAuth vs OpenID](https://donateoa.github.io/docs/oauth-vs-open-id.html)) sono emessi come JWT (JSON Web Token) e hanno una durata configurabile. Per mantenere una sessione attiva, il client può utilizzare il refresh token per ottenere nuovi token di accesso senza richiedere nuovamente l’autenticazione dell’utente. 

      **Sicurezza e Best Practices**

      - Utilizzare sempre HTTPS per tutte le richieste OAuth2
      - Conservare i token di accesso in modo sicuro (ad esempio, nell’header di autenticazione con Bearer Token)
  - name: tag3DAnnotation
    description: All 3D Annotation related operations
    x-displayName: 3d-annotations
  - name: tag3DAnnotation/{id}/annotations
    description: All Annotations related to a 3D Annotations
    x-displayName: 3d-annotations/{id}/annotations
  - name: tag3DAnnotation/{id}/3d-models
    description: All 3D Models  related operations
    x-displayName: 3d-annotations/{id}/3d-models
  - name: tag3DModel
    description: All 3D Model related operations
    x-displayName: 3D Models
  - name: tagAnnotation
    description: All Annotation related operations
    x-displayName: Annotations
  - name: tagEvents
    description: All Events related operations
    x-displayName: events
  - name: tagLocationsOfEvents
    description: All location related to event
    x-displayName: events/{id}/locations
  - name: tagIlluminatedScene
    x-displayName: Illuminated Scene
    description: All Illuminated Scene related operations
  - name: tagIlluminatedScene/{id}/3d-annotations
    x-displayName: 3d annotations of an Illuminated Scene
    description: 3D Annotations related to Illuminated Scene
  - name: tagIlluminatedScene/{id}/poses
    x-displayName: Posa3D of an Illuminated Scene
    description: Posa3D related to Illuminated Scene
  - name: tagIlluminatedScene/{id}/authors
    x-displayName: Authors of an Illuminated Scene
    description: Authors related to Illuminated Scene
  - name: tagIlluminatedScene/{id}/editors
    x-displayName: Editors of an Illuminated Scene
    description: Editors related to Illuminated Scene
  - name: tagLocations
    x-displayName: Locations
    description: All Locations related operations
  - name: tagManuscripts
    description: All Manuscripts related operations
    x-displayName: Manuscripts
  - name: tagManuscriptContents
    description: All Manuscript Contents related operations
    x-displayName: Contents of a Manuscript
  - name: tagManuscripts/{id}/locations
    x-displayName: Locations of a Manuscript
    description: Locations related to Manuscript
  - name: tagManuscripts/{id}/authors
    x-displayName: Authors of a Manuscript
    description: Authors related to Manuscript
  - name: tagManuscripts/{id}/editors
    x-displayName: Editors of a Manuscript
    description: Editors related to Manuscript
  - name: tagManuscripts/{id}/illuminated-scenes
    x-displayName: Illuminated Scenes of a Manuscript
    description: Illuminated Scenes related to Manuscript
  - name: tagPersons
    x-displayName: Persons
    description: All Persons related operations
  - name: tagPosa3D
    description: All Posa3D related operations
    x-displayName: Posa3D
  - name: tagProjects
    description: All Projects related operations
    x-displayName: Projects
  - name: tagTexture
    description: All Texture related operations
    x-displayName: Texture
  - name: tagAuthor
    description: All Author related operations
    x-displayName: Authors
  - name: tagEditors
    description: All editors related operations
    x-displayName: Editors

  - name: Models
    x-displayName: API Reference
    description: |
      ## Reference
      Una reference da una risorsa a un'altra
      <SchemaDefinition schemaRef="#/components/schemas/Reference" />


      ## Base Entity
      <SchemaDefinition schemaRef="#/components/schemas/Base" />

      ## Location
      A location object extending the `Base Entity`
      <SchemaDefinition schemaRef="#/components/schemas/Location" />

      ## Person
      A person object extending the `Base Entity`
      <SchemaDefinition schemaRef="#/components/schemas/Person" />

      ## Project
      A project object extending the `Base Entity`
      <SchemaDefinition schemaRef="#/components/schemas/Project" />  

      ## Event
      An event object extending the `Base Entity`
      <SchemaDefinition schemaRef="#/components/schemas/Event" />  

      ## Manuscript
      A manuscript object extending the `Base Entity`
      <SchemaDefinition schemaRef="#/components/schemas/Manuscript" />

      ## Light Manuscript 
      A Light manuscript object
      <SchemaDefinition schemaRef="#/components/schemas/LightManuscript" />

      ## Illuminated Scene
      An illuminated manuscript scene object extending the `Base Entity`
      <SchemaDefinition schemaRef="#/components/schemas/IlluminatedScene" />

      ## Light Illuminated Scene
      A light illuminated manuscript scene object
      <SchemaDefinition schemaRef="#/components/schemas/LightIlluminatedScene" />

      ## Posa3D
      A pose object extending the `Base Entity`
      <SchemaDefinition schemaRef="#/components/schemas/Posa3D" />

      ## Texture
      A texture object extending the `Base Entity`
      <SchemaDefinition schemaRef="#/components/schemas/Texture" />

      ## 3D Model
      A 3D model object extending the `Base Entity`
      <SchemaDefinition schemaRef="#/components/schemas/3DModel" />

      ## Annotation
      An annotation object extending the `Base Entity`
      <SchemaDefinition schemaRef="#/components/schemas/Annotation" />

      ## 3d Annotation
      A 3D annotation object extending the `Base Entity`
      <SchemaDefinition schemaRef="#/components/schemas/3DAnnotation" />

      ## Content
      A content object extending the `Base Entity`
      <SchemaDefinition schemaRef="#/components/schemas/Content" />

      ## LighContent
      A content input object
      <SchemaDefinition schemaRef="#/components/schemas/LighContent" />
paths:
  /auth/login:
    post:
      summary: Simulazione login
      description: Utilizzare questo endpoint per simulare il processo di login e ottenere un token di accesso. Utilizzare il pulsante `Authorize`di swagger per autorizzare le richieste successive.
      operationId: login
      tags:
        - authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "admin"
                password:
                  type: string
                  example: "password123"
      responses:
        "200":
          description: Access token generato
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiYWRtaW4iLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE2ODAwMDAwMDB9.4f8GHyZp6vQqCdT5PqWlhhXq5ExGz5FjXX8peKax2Ug"
        "401":
          description: Credenziali non valide
  /authorize:
    post:
      tags:
        - authentication
      summary: /authorize
      description: |
        Inizia il processo di autorizzazione OAuth2.
        Endpoint per ottenere il codice di autorizzazione.
      parameters:
        - name: response_type
          in: query
          required: true
          schema:
            type: string
            enum: [code]
          description: "Specifica il tipo di risposta richiesta. Tipicamente 'code' per Authorization Code Flow."
        - name: client_id
          in: query
          required: true
          schema:
            type: string
          description: "Identificativo univoco del client registrato."
        - name: redirect_uri
          in: query
          required: true
          schema:
            type: string
            format: uri
          description: "L'URI a cui verrà reindirizzato l'utente dopo l'autorizzazione. Deve corrispondere a un valore registrato."
        - name: scope
          in: query
          required: true
          schema:
            type: string
          description: "Permessi richiesti dall'applicazione. Devono essere separati da spazi."
        - name: state
          in: query
          required: false
          schema:
            type: string
          description: "Parametro utilizzato per prevenire attacchi CSRF e mantenere il contesto della sessione."
      responses:
        "302":
          description: Redirect all'URI di callback con il codice di autorizzazione
  /token:
    post:
      tags:
        - authentication
      summary: /token
      description: |
        Endpoint per scambiare il codice di autorizzazione con un token di accesso.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                [grant_type, client_id, client_secret, code, redirect_uri]
              properties:
                grant_type:
                  type: string
                  enum: [authorization_code]
                  description: "Tipo di grant richiesto. Deve essere 'authorization_code' per questo flusso."
                client_id:
                  type: string
                  description: "Identificativo univoco del client registrato."
                client_secret:
                  type: string
                  description: "Segreto del client per l'autenticazione. Non esporre mai questa informazione pubblicamente."
                code:
                  type: string
                  description: "Codice di autorizzazione ottenuto dall'endpoint /authorize."
                redirect_uri:
                  type: string
                  format: uri
                  description: "L'URI di reindirizzamento registrato usato nella richiesta iniziale."
      responses:
        "200":
          description: Token di accesso generato
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  token_type:
                    type: string
                    example: "Bearer"
                  expires_in:
                    type: integer
                  refresh_token:
                    type: string
  /revoke:
    post:
      tags:
        - authentication
      summary: /revoke
      description: "Endpoint per invalidare un token di accesso o refresh token. Utilizza POST per sicurezza."
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: [token]
              properties:
                token:
                  type: string
                  description: "Il token che deve essere revocato."
      responses:
        "200":
          description: Token revocato con successo
  /userinfo:
    get:
      tags:
        - authentication
      summary: /userinfo
      description: "returns le informazioni dell'utente basate sul token di accesso fornito."
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Informazioni sull'utente
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  email:
                    type: string
  /locations:
    get:
      tags:
        - tagLocations
      operationId: getLocation
      summary: Get Locations
      description: Get all locations. This operation retrieves all the available locations.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: "id"
          schema:
            type: array
            items:
              type: string
          description: "Filtra le location per ID, valori multipli separati da virgola ad es. `1,2,3`"
        - in: query
          name: "name"
          schema:
            type: string
          description: "Filtra le location per nome"
        - in: query
          name: "address"
          schema:
            type: string
          description: "Filtra le location per indirizzo"

        - in: query
          name: "coordinates"
          schema:
            type: array
            items:
              type: number
          description: "Filtra le location per coordinate, valori separati da virgola ad es. `1.0,2.0`"
        - in: query
          name: "identifiers"
          schema:
            type: array
            items:
              type: string
          description: "Filtra i manoscritti per identificatore, valori multipli separati da virgola ad es. `1,2,3`"
        - in: header
          name: Accept
          schema:
            type: string
            enum:
              - application/json
              - text/turtle
          required: false
          description: "Formato di risposta desiderato. Valori supportati: `application/json`,  `text/turtle`"
        - in: query
          name: "page"
          schema:
            type: integer
            default: 0
            minimum: 0
          description: "Numero della pagina (facoltativo, predefinito: 0). L'indice parte da 0."
        - in: query
          name: "size"
          schema:
            type: integer
            default: 20
            minimum: 1
          description: "Numero di elementi per pagina (facoltativo, predefinito: 20). Deve essere maggiore di 0."
        - in: query
          name: "sort"
          schema:
            type: string
            example: "name,asc"
          description: "Campo per l'ordinamento (facoltativo). Formato: `campo,direzione` (es. `name,asc`). Direzioni supportate: `asc`, `desc`."

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Location"
              examples:
                example1:
                  value:
                    - id: "1"
                      name: "Location 1"
                      description: "Description 1"
                      address: "Address 1"
                      coordinates: [1.0, 2.0]
                    - id: "2"
                      name: "Location 2"
                      description: "Description 2"
                      address: "Address 2"
                      coordinates: [3.0, 4.0]
        "401":
          description: Unauthorized
    post:
      tags:
        - tagLocations
      operationId: createLocation
      summary: Create Location
      description: Create a new location with the specified details
      security:
        - bearerAuth:
            - admin
            - editor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Location"
      responses:
        "201":
          description: Location created successfully
        "401":
          description: Unauthorized
  /locations/{id}:
    get:
      tags:
        - tagLocations
      operationId: getLocationById
      summary: Get Location
      description: Get a specific location by its ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        "404":
          description: Location not found
        "401":
          description: Unauthorized
    put:
      tags:
        - tagLocations
      operationId: updateLocation
      summary: Update Location
      description: Update a location with new information
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth:
            - admin
            - editor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Location"
      responses:
        "200":
          description: Location updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        "404":
          description: Location not found
        "401":
          description: Unauthorized
    patch:
      tags:
        - tagLocations
      operationId: patchLocation
      security:
        - bearerAuth:
            - admin
            - editor
      summary: Patch Location
      description: partial update a location with new information
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Location"
      responses:
        "200":
          description: Location patched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        "404":
          description: Location not found
        "401":
          description: Unauthorized
    delete:
      tags:
        - tagLocations
      operationId: deleteLocation
      summary: Delete Location
      description: Delete a location. This operation deletes a specific location by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth:
            - admin
            - editor
      responses:
        "204":
          description: Location deleted successfully
        "404":
          description: Location not found
        "401":
          description: Unauthorized
  /persons:
    post:
      tags:
        - tagPersons
      operationId: createPerson
      summary: Create Person
      description: Create a new person with the given information
      security:
        - bearerAuth:
            - admin
            - editor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Person"
      responses:
        "201":
          description: Person created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
    get:
      summary: Get persons
      tags:
        - tagPersons
      operationId: getPersons
      description: Get all persons
      security:
        - bearerAuth:
            - admin
            - editor
      responses:
        "200":
          description: A list of persons
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
  /persons/{id}:
    get:
      summary: Get a specific person
      tags:
        - tagPersons
      operationId: getPersonById
      description: Get a person . This operation retrieves a specific person by their ID.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A person
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
        "404":
          description: Person not found
    put:
      summary: Replace a person
      tags:
        - tagPersons
      operationId: replacePerson
      description: Replace a person  with new information
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Person"
      responses:
        "200":
          description: Person replaced
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
        "404":
          description: Person not found
    patch:
      summary: Patch a person
      tags:
        - tagPersons
      operationId: patchPerson
      description: Update a person . This operation updates a person's information based on their ID.
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Person"
      responses:
        "200":
          description: Person updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
        "404":
          description: Person not found
    delete:
      summary: Delete a person
      tags:
        - tagPersons
      operationId: deletePerson
      description: Delete a person . This operation deletes a person based on their ID.
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Person deleted
        "401":
          description: Unauthorized
        "404":
          description: Person not found
  /events:
    get:
      operationId: getEvents
      security:
        - bearerAuth: []
      tags:
        - tagEvents
      summary: Get all events
      description: This operation retrieves all events.
      responses:
        "200":
          description: A list of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
        "401":
          description: Unauthorized
    post:
      operationId: createEvent
      security:
        - bearerAuth:
            - admin
            - editor
      tags:
        - tagEvents
      summary: Create a new event
      description: This operation creates a new event.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        "201":
          description: Event created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "401":
          description: Unauthorized
  /events/{id}:
    get:
      operationId: getEventById
      security:
        - bearerAuth: []
      tags:
        - tagEvents
      summary: Get an event
      description: This operation retrieves an event based on its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: An event
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "401":
          description: Unauthorized
        "404":
          description: Event not found
    patch:
      operationId: patchEventById
      security:
        - bearerAuth:
            - admin
            - editor
      tags:
        - tagEvents
      summary: Update an event
      description: This operation updates an event based on its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        "200":
          description: Event updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "401":
          description: Unauthorized
        "404":
          description: Event not found
    delete:
      operationId: deleteEventById
      security:
        - bearerAuth:
            - admin
            - editor
      tags:
        - tagEvents
      summary: Delete an event
      description: This operation deletes an event based on its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Event deleted
        "401":
          description: Unauthorized
        "404":
          description: Event not found
    put:
      operationId: replaceEventById
      security:
        - bearerAuth:
            - admin
            - editor
      tags:
        - tagEvents
      summary: Replace an event
      description: This operation replaces an event based on its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        "200":
          description: Event replaced
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "401":
          description: Unauthorized
        "404":
          description: Event not found
  /events/{eventId}/locations:
    get:
      tags:
        - tagLocationsOfEvents
      operationId: getLocationOfEvents
      summary: Get Locations of an Event
      description: Get locations of an Event.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: eventId
          required: true
          schema:
            type: string
        - in: query
          name: "id"
          schema:
            type: array
            items:
              type: string
          description: "Filtra le location per ID, valori multipli separati da virgola ad es. `1,2,3`"
        - in: query
          name: "name"
          schema:
            type: string
          description: "Filtra le location per nome"
        - in: query
          name: "address"
          schema:
            type: string
          description: "Filtra le location per indirizzo"

        - in: query
          name: "coordinates"
          schema:
            type: array
            items:
              type: number
          description: "Filtra le location per coordinate, valori separati da virgola ad es. `1.0,2.0`"
        - in: query
          name: "identifiers"
          schema:
            type: array
            items:
              type: string
          description: "Filtra i manoscritti per identificatore, valori multipli separati da virgola ad es. `1,2,3`"
        - in: header
          name: Accept
          schema:
            type: string
            enum:
              - application/json
              - text/turtle
          required: false
          description: "Formato di risposta desiderato. Valori supportati: `application/json`,  `text/turtle`"
        - in: query
          name: "page"
          schema:
            type: integer
            default: 0
            minimum: 0
          description: "Numero della pagina (facoltativo, predefinito: 0). L'indice parte da 0."
        - in: query
          name: "size"
          schema:
            type: integer
            default: 20
            minimum: 1
          description: "Numero di elementi per pagina (facoltativo, predefinito: 20). Deve essere maggiore di 0."
        - in: query
          name: "sort"
          schema:
            type: string
            example: "name,asc"
          description: "Campo per l'ordinamento (facoltativo). Formato: `campo,direzione` (es. `name,asc`). Direzioni supportate: `asc`, `desc`."

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Location"
              examples:
                example1:
                  value:
                    - id: "1"
                      name: "Location 1"
                      description: "Description 1"
                      address: "Address 1"
                      coordinates: [1.0, 2.0]
                    - id: "2"
                      name: "Location 2"
                      description: "Description 2"
                      address: "Address 2"
                      coordinates: [3.0, 4.0]
        "401":
          description: Unauthorized
    post:
      tags:
        - tagLocationsOfEvents
      operationId: createLocationOfEvent
      summary: Add Location to Event
      description: Add a location to an event
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - in: path
          name: eventId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Location"
      responses:
        "201":
          description: Location created successfully
        "401":
          description: Unauthorized
  /events/{eventId}/locations/{locationId}:
    get:
      tags:
        - tagLocationsOfEvents
      operationId: getLocationByIdOfEvent
      summary: Get Location of an Event
      description: Get a specific location by its ID
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
        - name: locationId
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        "404":
          description: Location not found
        "401":
          description: Unauthorized
    put:
      tags:
        - tagLocationsOfEvents
      operationId: updateLocationOfEvent
      summary: Update Location of an Event
      description: Update a location of an event with new information
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
        - name: locationId
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth:
            - admin
            - editor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Location"
      responses:
        "200":
          description: Location updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        "404":
          description: Location not found
        "401":
          description: Unauthorized
    patch:
      tags:
        - tagLocationsOfEvents
      operationId: patchLocationOfEvent
      security:
        - bearerAuth:
            - admin
            - editor
      summary: Patch Location of an Event
      description: partial update a location with new information
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
        - name: locationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Location"
      responses:
        "200":
          description: Location patched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        "404":
          description: Location not found
        "401":
          description: Unauthorized
    delete:
      tags:
        - tagLocationsOfEvents
      operationId: deleteLocationOfEvent
      summary: Delete Location of an Event
      description: Delete a location of an event. This operation deletes a specific location by its ID.
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
        - name: locationId
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth:
            - admin
            - editor
      responses:
        "204":
          description: Location deleted successfully
        "404":
          description: Location not found
        "401":
          description: Unauthorized

  /projects:
    post:
      tags:
        - tagProjects
      summary: Create a new project
      description: This operation creates a new project.
      operationId: createProject
      security:
        - bearerAuth:
            - admin
            - editor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"
      responses:
        "201":
          description: Project created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "401":
          description: Unauthorized
    get:
      tags:
        - tagProjects
      summary: Get all projects
      description: This operation retrieves all projects.
      operationId: getProjects
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"
        "401":
          description: Unauthorized
  /projects/{id}:
    get:
      tags:
        - tagProjects
      summary: Get a project
      description: This operation retrieves a project based on its ID.
      operationId: getProjectById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A project
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "401":
          description: Unauthorized
        "404":
          description: Project not found
    patch:
      tags:
        - tagProjects
      summary: Update a project
      description: This operation updates a project based on its ID.
      operationId: updateProject
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"
      responses:
        "200":
          description: Project updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "401":
          description: Unauthorized
        "404":
          description: Project not found
    delete:
      tags:
        - tagProjects
      summary: Delete a project
      description: This operation deletes a project based on its ID.
      operationId: deleteProject
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Project deleted
        "401":
          description: Unauthorized
        "404":
          description: Project not found
    put:
      tags:
        - tagProjects
      summary: Replace a project
      description: This operation replaces a project based on its ID.
      operationId: replaceProject
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"
      responses:
        "200":
          description: Project replaced
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "401":
          description: Unauthorized
        "404":
          description: Project not found
  /manuscripts:
    get:
      operationId: getManuscripts
      tags:
        - tagManuscripts
      summary: Get all manuscripts
      description: This operation retrieves all manuscripts.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: "id"
          required: false
          schema:
            type: array
            items:
              type: string
          description: "Filtra i manoscritti per ID, valori multipli separati da virgola ad es. `1,2,3`"
        - in: query
          name: "title"
          required: false
          schema:
            type: string
          description: "Filtra i manoscritti per titolo"
        - in: query
          name: "description"
          required: false
          schema:
            type: string
          description: "Filtra i manoscritti per descrizione"
        - in: query
          name: status
          required: false
          schema:
            type: string
            enum:
              - draft
              - in_review
              - revisions_required
              - accepted
              - in_editing
              - published
              - rejected
              - withdrawn
          description: |
            Filtra i manoscritti in base al loro stato:
              - `draft`: Bozza
              - `in_review`: In revisione
              - `revisions_required`: Revisione necessaria
              - `accepted`: Accettato
              - `in_editing`: In fase di editing
              - `published`: Pubblicato
              - `rejected`: Rifiutato
              - `withdrawn`: Ritirato
        - in: query
          name: "locations"
          required: false
          schema:
            type: string
          description: "Filtra i manoscritti per nome location"
        - in: query
          name: "locationId"
          required: false
          schema:
            type: array
            items:
              type: string
          description: "Filtra i manoscritti per location ID, valori multipli separati da virgola ad es. `1,2,3`"
        - in: query
          name: "authors"
          required: false
          schema:
            type: array
            items:
              type: string
          description: "Filtra i manoscritti per nome autore"
        - in: query
          name: "authorId"
          required: false
          schema:
            type: array
            items:
              type: string
        - in: query
          name: "editorId"
          schema:
            type: array
            items:
              type: string
            description: "Filtra i manoscritti per ID dell'editore, valori multipli separati da virgola ad es. `1,2,3`"
        - in: query
          name: "identifiers"
          required: false
          schema:
            type: array
            items:
              type: string
          description: "Filtra i manoscritti per identificatore, valori multipli separati da virgola ad es. `1,2,3`"
        - in: header
          name: Accept
          required: true
          schema:
            type: string
            enum:
              - application/json
              - text/turtle
          description: "Formato di risposta desiderato. Valori supportati: `application/json`,  `text/turtle`"
        - in: query
          name: "page"
          schema:
            type: integer
            default: 0
            minimum: 0
          description: "Numero della pagina (facoltativo, predefinito: 0). L'indice parte da 0."
        - in: query
          name: "size"
          schema:
            type: integer
            default: 20
            minimum: 1
          description: "Numero di elementi per pagina (facoltativo, predefinito: 20). Deve essere maggiore di 0."
        - in: query
          name: "sort"
          schema:
            type: string
            example: "name,asc"
          description: "Campo per l'ordinamento (facoltativo). Formato: `campo,direzione` (es. `name,asc`). Direzioni supportate: `asc`, `desc`."

      responses:
        "200":
          description: A list of manuscripts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LightManuscript"
        "401":
          description: Unauthorized
        "406":
          description: Formato non supportato
    post:
      tags:
        - tagManuscripts
      summary: Create a new manuscript
      description: This operation creates a new manuscript.
      operationId: createManuscript
      security:
        - bearerAuth:
            - admin
            - editor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LightManuscript"
      responses:
        "201":
          description: Manuscript created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LightManuscript"
        "401":
          description: Unauthorized
  /manuscripts/{id}:
    get:
      tags:
        - tagManuscripts
      summary: Get a manuscript
      description: This operation retrieves a manuscript based on its ID.
      operationId: getManuscriptById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A manuscript
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Manuscript"
            text/turtle:
              schema:
                $ref: "#/components/schemas/Manuscript"

        "401":
          description: Unauthorized
        "404":
          description: Manuscript not found
        "406":
          description: Formato non supportato
    patch:
      tags:
        - tagManuscripts
      summary: Update a manuscript
      description: This operation updates a manuscript based on its ID.
      operationId: updateManuscript
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LightManuscript"
      responses:
        "200":
          description: Manuscript updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LightManuscript"
        "401":
          description: Unauthorized
        "404":
          description: Manuscript not found
    delete:
      tags:
        - tagManuscripts
      summary: Delete a manuscript
      description: This operation deletes a manuscript based on its ID.
      operationId: deleteManuscript
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Manuscript deleted
        "401":
          description: Unauthorized
        "404":
          description: Manuscript not found
    put:
      tags:
        - tagManuscripts
      summary: Replace a manuscript
      description: This operation replaces a manuscript based on its ID.
      operationId: replaceManuscript
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LightManuscript"
      responses:
        "200":
          description: Manuscript replaced
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LightManuscript"
        "401":
          description: Unauthorized
        "404":
          description: Manuscript not found
  /manuscripts/{id}/contents:
    get:
      summary: Ottiene tutti i contenuti di un manoscritto
      operationId: getManuscriptContents
      tags:
        - tagManuscriptContents
      parameters:
        - name: id
          in: path
          required: true
          description: ID del manoscritto
          schema:
            type: integer
        - in: header
          name: Accept
          schema:
            type: string
            enum:
              - application/json
              - text/turtle
          required: false
          description: "Formato di risposta desiderato. Valori supportati: `application/json`,  `text/turtle`"
      responses:
        "200":
          description: Elenco dei contenuti del manoscritto
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Content"
        "401":
          description: Unauthorized
        "404":
          description: Manoscritto non trovato
        "406":
          description: Formato non supportato
    post:
      operationId: createManuscriptContent
      summary: Aggiunge un nuovo contenuto a un manoscritto
      tags:
        - tagManuscriptContents
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: id
          in: path
          required: true
          description: ID del manoscritto
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LighContent"
      responses:
        "201":
          description: Contenuto creato con successo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Content"
        "401":
          description: Unauthorized
  /manuscripts/{manuscriptId}/contents/{contentId}:
    put:
      operationId: updateManuscriptContent
      summary: Aggiorna un contenuto specifico di un manoscritto
      tags:
        - tagManuscriptContents
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: manuscriptId
          in: path
          required: true
          description: ID del manoscritto
          schema:
            type: integer
        - name: contentId
          in: path
          required: true
          description: ID del contenuto
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LighContent"
      responses:
        "200":
          description: Contenuto aggiornato con successo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Content"
        "401":
          description: Unauthorized
        "404":
          description: Contenuto non trovato
    delete:
      operationId: deleteManuscriptContent
      summary: Elimina un contenuto di un manoscritto
      tags:
        - tagManuscriptContents
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: manuscriptId
          in: path
          required: true
          description: ID del manoscritto
          schema:
            type: integer
        - name: contentId
          in: path
          required: true
          description: ID del contenuto
          schema:
            type: integer
      responses:
        "204":
          description: Contenuto eliminato con successo
        "401":
          description: Unauthorized
        "404":
          description: Contenuto non trovato
  /manuscripts/{manuscriptId}/authors:
    get:
      operationId: getManuscriptAuthors
      summary: Get authors of a manuscript
      tags:
        - tagManuscripts/{id}/authors
      parameters:
        - name: manuscriptId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
        "404":
          description: Manuscript not found
    post:
      operationId: addAuthorToManuscript
      summary: Add author to manuscript
      tags:
        - tagManuscriptAuthors
      parameters:
        - name: manuscriptId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Person"
      responses:
        "201":
          description: Author added successfully
        "401":
          description: Unauthorized
  /manuscripts/{manuscriptId}/authors/{authorId}:
    get:
      operationId: getManuscriptAuthor
      summary: Get author of a manuscript
      tags:
        - tagManuscripts/{id}/authors
      parameters:
        - name: manuscriptId
          in: path
          required: true
          schema:
            type: string
        - name: authorId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
        "404":
          description: Author not found
    put:
      operationId: updateAuthorOfManuscript
      summary: Update author of manuscript
      tags:
        - tagManuscripts/{id}/authors
      parameters:
        - name: manuscriptId
          in: path
          required: true
          schema:
            type: string
        - name: authorId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Person"
      responses:
        "200":
          description: Author updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
        "404":
          description: Author not found
    patch:
      operationId: patchAuthorOfManuscript
      summary: Patch author of manuscript
      tags:
        - tagManuscripts/{id}/authors
      parameters:
        - name: manuscriptId
          in: path
          required: true
          schema:
            type: string
        - name: authorId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Person"
      responses:
        "200":
          description: Author patched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
        "404":
          description: Author not found
    delete:
      operationId: removeAuthorFromManuscript
      summary: Remove author from manuscript
      tags:
        - tagManuscripts/{id}/authors
      parameters:
        - name: manuscriptId
          in: path
          required: true
          schema:
            type: string
        - name: authorId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Author removed successfully
        "401":
          description: Unauthorized
        "404":
          description: Author not found
  /manuscripts/{manuscriptId}/editors:
    get:
      operationId: getManuscriptEditors
      summary: Get editors of a manuscript
      tags:
        - tagManuscripts/{id}/editors
      parameters:
        - name: manuscriptId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
        "404":
          description: Manuscript not found
    post:
      operationId: addEditorToManuscript
      summary: Add editor to manuscript
      tags:
        - tagManuscripts/{id}/editors
      parameters:
        - name: manuscriptId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Person"
      responses:
        "201":
          description: Editor added successfully
        "401":
          description: Unauthorized
  /manuscripts/{manuscriptId}/editors/{editorId}:
    get:
      operationId: getManuscriptEditor
      summary: Get editor of a manuscript
      tags:
        - tagManuscripts/{id}/editors
      parameters:
        - name: manuscriptId
          in: path
          required: true
          schema:
            type: string
        - name: editorId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
        "404":
          description: Editor not found
    put:
      operationId: updateEditorOfManuscript
      summary: Update editor of manuscript
      tags:
        - tagManuscripts/{id}/editors
      parameters:
        - name: manuscriptId
          in: path
          required: true
          schema:
            type: string
        - name: editorId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Person"
      responses:
        "200":
          description: Editor updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
        "404":
          description: Editor not found
    patch:
      operationId: patchEditorOfManuscript
      summary: Patch editor of manuscript
      tags:
        - tagManuscripts/{id}/editors
      parameters:
        - name: manuscriptId
          in: path
          required: true
          schema:
            type: string
        - name: editorId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Person"
      responses:
        "200":
          description: Editor patched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
        "404":
          description: Editor not found
    delete:
      operationId: removeEditorFromManuscript
      summary: Remove editor from manuscript
      tags:
        - tagManuscripts/{id}/editors
      parameters:
        - name: manuscriptId
          in: path
          required: true
          schema:
            type: string
        - name: editorId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Editor removed successfully
        "401":
          description: Unauthorized
        "404":
          description: Editor not found
  /manuscripts/{manuscriptId}/locations:
    get:
      operationId: getManuscriptLocations
      summary: Get locations of a manuscript
      tags:
        - tagManuscripts/{id}/locations
      parameters:
        - name: manuscriptId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Location"
        "401":
          description: Unauthorized
        "404":
          description: Manuscript not found
    post:
      operationId: addLocationToManuscript
      summary: Add location to manuscript
      tags:
        - tagManuscripts/{id}/locations
      parameters:
        - name: manuscriptId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Location"
      responses:
        "201":
          description: Location added successfully
        "401":
          description: Unauthorized
  /manuscripts/{manuscriptId}/locations/{locationId}:
    get:
      operationId: getManuscriptLocation
      summary: Get location of a manuscript
      tags:
        - tagManuscripts/{id}/locations
      parameters:
        - name: manuscriptId
          in: path
          required: true
          schema:
            type: string
        - name: locationId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        "401":
          description: Unauthorized
        "404":
          description: Location not found
    put:
      operationId: updateLocationOfManuscript
      summary: Update location of manuscript
      tags:
        - tagManuscripts/{id}/locations
      parameters:
        - name: manuscriptId
          in: path
          required: true
          schema:
            type: string
        - name: locationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Location"
      responses:
        "200":
          description: Location updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        "401":
          description: Unauthorized
        "404":
          description: Location not found
    patch:
      operationId: patchLocationOfManuscript
      summary: Patch location of manuscript
      tags:
        - tagManuscripts/{id}/locations
      parameters:
        - name: manuscriptId
          in: path
          required: true
          schema:
            type: string
        - name: locationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Location"
      responses:
        "200":
          description: Location patched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        "401":
          description: Unauthorized
        "404":
          description: Location not found
    delete:
      operationId: deleteLocationOfManuscript
      summary: Delete location of manuscript
      tags:
        - tagManuscripts/{id}/locations
      parameters:
        - name: manuscriptId
          in: path
          required: true
          schema:
            type: string
        - name: locationId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Location deleted successfully
        "401":
          description: Unauthorized
        "404":
          description: Location not found
  /manuscripts/{manuscriptId}/illuminated-scenes:
    get:
      operationId: getManuscriptIlluminatedScenes
      summary: Get illuminated scenes of a manuscript
      tags:
        - tagManuscripts/{id}/illuminated-scenes
      parameters:
        - name: manuscriptId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IlluminatedScene"
        "401":
          description: Unauthorized
        "404":
          description: Manuscript not found
    post:
      operationId: addIlluminatedSceneToManuscript
      summary: Add illuminated scene to manuscript
      tags:
        - tagManuscripts/{id}/illuminated-scenes
      parameters:
        - name: manuscriptId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IlluminatedScene"
      responses:
        "201":
          description: Illuminated scene added successfully
        "401":
          description: Unauthorized
  /manuscripts/{manuscriptId}/illuminated-scenes/{illuminatedSceneId}:
    get:
      operationId: getManuscriptIlluminatedScene
      summary: Get illuminated scene of a manuscript
      tags:
        - tagManuscripts/{id}/illuminated-scenes
      parameters:
        - name: manuscriptId
          in: path
          required: true
          schema:
            type: string
        - name: illuminatedSceneId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LightIlluminatedScene"
        "401":
          description: Unauthorized
        "404":
          description: Illuminated scene not found
    put:
      operationId: updateIlluminatedSceneOfManuscript
      summary: Update illuminated scene of manuscript
      tags:
        - tagManuscripts/{id}/illuminated-scenes
      parameters:
        - name: manuscriptId
          in: path
          required: true
          schema:
            type: string
        - name: illuminatedSceneId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InputIlluminatedScene"
      responses:
        "200":
          description: Illuminated scene updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IlluminatedScene"
        "401":
          description: Unauthorized
        "404":
          description: Illuminated scene not found
    patch:
      operationId: patchIlluminatedSceneOfManuscript
      summary: Patch illuminated scene of manuscript
      tags:
        - tagManuscripts/{id}/illuminated-scenes
      parameters:
        - name: manuscriptId
          in: path
          required: true
          schema:
            type: string
        - name: illuminatedSceneId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InputIlluminatedScene"
      responses:
        "200":
          description: Illuminated scene patched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IlluminatedScene"
        "401":
          description: Unauthorized
        "404":
          description: Illuminated scene not found
    delete:
      operationId: deleteIlluminatedSceneOfManuscript
      summary: Delete illuminated scene of manuscript
      tags:
        - tagManuscripts/{id}/illuminated-scenes
      parameters:
        - name: manuscriptId
          in: path
          required: true
          schema:
            type: string
        - name: illuminatedSceneId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Illuminated scene deleted successfully
        "401":
          description: Unauthorized
        "404":
          description: Illuminated scene not found

  /poses:
    get:
      summary: Retrieve all poses
      operationId: getPosa3D
      security:
        - bearerAuth: []
      tags:
        - tagPosa3D
      parameters:
        - in: header
          name: Accept
          schema:
            type: string
            enum:
              - application/json
              - text/turtle
          required: false
          description: "Formato di risposta desiderato. Valori supportati: `application/json`,  `text/turtle`"
        - in: query
          name: "page"
          schema:
            type: integer
            default: 0
            minimum: 0
          description: "Numero della pagina (facoltativo, predefinito: 0). L'indice parte da 0."

        - in: query
          name: "size"
          schema:
            type: integer
            default: 20
            minimum: 1
          description: "Numero di elementi per pagina (facoltativo, predefinito: 20). Deve essere maggiore di 0."

        - in: query
          name: "sort"
          schema:
            type: string
            example: "name,asc"
          description: "Campo per l'ordinamento (facoltativo). Formato: `campo,direzione` (es. `name,asc`). Direzioni supportate: `asc`, `desc`."
      responses:
        "200":
          description: List of all available poses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LightPose"
            text/turtle:
              schema:
                type: string
        "401":
          description: Unauthorized
    post:
      summary: Create a new pose
      operationId: createPose
      security:
        - bearerAuth:
            - admin
            - editor
      tags:
        - tagPosa3D
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InputPose"
      responses:
        "201":
          description: Posa3D successfully created
        "401":
          description: Unauthorized
  /poses/{id}:
    get:
      summary: Get a pose
      operationId: getPoseById
      tags:
        - tagPosa3D
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Posa3D retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Posa3D"
        "401":
          description: Unauthorized
        "404":
          description: Posa3D not found
    put:
      summary: Replace a pose
      operationId: replacePose
      tags:
        - tagPosa3D
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InputPose"
      responses:
        "200":
          description: Posa3D replaced successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Posa3D"
        "401":
          description: Unauthorized
        "404":
          description: Posa3D not found
    patch:
      summary: Update a pose
      operationId: updatePose
      tags:
        - tagPosa3D
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InputPose"
      responses:
        "200":
          description: Posa3D updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Posa3D"
        "401":
          description: Unauthorized
        "404":
          description: Posa3D not found
    delete:
      summary: Delete a pose
      operationId: deletePose
      tags:
        - tagPosa3D
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Posa3D deleted successfully
        "401":
          description: Unauthorized
        "404":
          description: Posa3D not found
  /poses/{poseId}/3d-models:
    get:
      summary: Get 3D models of a pose
      operationId: getPose3DModels
      tags:
        - tagPosa3D/{id}/3d-models
      parameters:
        - name: poseId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/3DModel"
        "401":
          description: Unauthorized
        "404":
          description: Posa3D not found
    post:
      operationId: add3DModelToPose
      summary: Add 3D model to pose
      tags:
        - tagPosa3D/{id}/3d-models
      parameters:
        - name: poseId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/3DModel"
      responses:
        "201":
          description: 3D model added successfully
        "401":
          description: Unauthorized
  /poses/{poseId}/3d-models/{3dModelId}:
    get:
      operationId: getPose3DModel
      summary: Get 3D model of a pose
      tags:
        - tagPosa3D/{id}/3d-models
      parameters:
        - name: poseId
          in: path
          required: true
          schema:
            type: string
        - name: 3dModelId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/3DModel"
        "401":
          description: Unauthorized
        "404":
          description: 3D model not found
    put:
      operationId: update3DModelOfPose
      summary: Update 3D model of pose
      tags:
        - tagPosa3D/{id}/3d-models
      parameters:
        - name: poseId
          in: path
          required: true
          schema:
            type: string
        - name: 3dModelId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/3DModel"
      responses:
        "200":
          description: 3D model updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/3DModel"
        "401":
          description: Unauthorized
        "404":
          description: 3D model not found
    patch:
      operationId: patch3DModelOfPose
      summary: Patch 3D model of pose
      tags:
        - tagPosa3D/{id}/3d-models
      parameters:
        - name: poseId
          in: path
          required: true
          schema:
            type: string
        - name: 3dModelId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/3DModel"
      responses:
        "200":
          description: 3D model patched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/3DModel"
        "401":
          description: Unauthorized
        "404":
          description: 3D model not found
    delete:
      operationId: delete3DModelOfPose
      summary: Delete 3D model of pose
      tags:
        - tagPosa3D/{id}/3d-models
      parameters:
        - name: poseId
          in: path
          required: true
          schema:
            type: string
        - name: 3dModelId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: 3D model deleted successfully
        "401":
          description: Unauthorized
        "404":
          description: 3D model not found
  /poses/{poseId}/contents:
    get:
      operationId: getPoseContents
      summary: Get contents of a pose
      tags:
        - tagPosa3D/{id}/contents
      parameters:
        - name: poseId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Content"
        "401":
          description: Unauthorized
        "404":
          description: Posa3D not found
    post:
      operationId: addContentToPose
      summary: Add content to pose
      tags:
        - tagPosa3D/{id}/contents
      parameters:
        - name: poseId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Content"
      responses:
        "201":
          description: Content added successfully
        "401":
          description: Unauthorized
  /poses/{poseId}/contents/{contentId}:
    get:
      operationId: getPoseContent
      summary: Get content of a pose
      tags:
        - tagPosa3D/{id}/contents
      parameters:
        - name: poseId
          in: path
          required: true
          schema:
            type: string
        - name: contentId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Content"
        "401":
          description: Unauthorized
        "404":
          description: Content not found
    put:
      operationId: updateContentOfPose
      summary: Update content of pose
      tags:
        - tagPosa3D/{id}/contents
      parameters:
        - name: poseId
          in: path
          required: true
          schema:
            type: string
        - name: contentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Content"
      responses:
        "200":
          description: Content updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Content"
        "401":
          description: Unauthorized
        "404":
          description: Content not found
    patch:
      operationId: patchContentOfPose
      summary: Patch content of pose
      tags:
        - tagPosa3D/{id}/contents
      parameters:
        - name: poseId
          in: path
          required: true
          schema:
            type: string
        - name: contentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Content"
      responses:
        "200":
          description: Content patched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Content"
        "401":
          description: Unauthorized
        "404":
          description: Content not found
    delete:
      operationId: deleteContentOfPose
      summary: Delete content of pose
      tags:
        - tagPosa3D/{id}/contents
      parameters:
        - name: poseId
          in: path
          required: true
          schema:
            type: string
        - name: contentId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Content deleted successfully
        "401":
          description: Unauthorized
        "404":
          description: Content not found

  /3d-model:
    get:
      summary: Retrieve all 3D models
      operationId: get3DModels
      security:
        - bearerAuth: []

      tags:
        - tag3DModel
      parameters:
        - in: header
          name: Accept
          schema:
            type: string
            enum:
              - application/json
              - text/turtle
          required: false
          description: "Formato di risposta desiderato. Valori supportati: `application/json`,  `text/turtle`"
        - in: query
          name: "page"
          schema:
            type: integer
            default: 0
            minimum: 0
          description: "Numero della pagina (facoltativo, predefinito: 0). L'indice parte da 0."

        - in: query
          name: "size"
          schema:
            type: integer
            default: 20
            minimum: 1
          description: "Numero di elementi per pagina (facoltativo, predefinito: 20). Deve essere maggiore di 0."

        - in: query
          name: "sort"
          schema:
            type: string
            example: "name,asc"
          description: "Campo per l'ordinamento (facoltativo). Formato: `campo,direzione` (es. `name,asc`). Direzioni supportate: `asc`, `desc`."

      responses:
        "200":
          description: List of all 3D models
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Light3DModel"
            text/turtle:
              schema:
                type: string

        "401":
          description: Unauthorized
        "406":
          description: Formato non supportato
    post:
      summary: Create a new 3D model
      operationId: create3DModel
      security:
        - bearerAuth:
            - admin
            - editor

      tags:
        - tag3DModel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Input3DModel"
      responses:
        "201":
          description: 3D model successfully created
        "401":
          description: Unauthorized
  /3d-model/{id}:
    get:
      summary: Get a 3D model
      operationId: get3DModelById
      tags:
        - tag3DModel
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 3D model retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/3DModel"
        "401":
          description: Unauthorized
        "404":
          description: 3D model not found
    put:
      summary: Replace a 3D model
      operationId: replace3DModel
      tags:
        - tag3DModel
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Input3DModel"
      responses:
        "200":
          description: 3D model replaced successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/3DModel"
        "401":
          description: Unauthorized
        "404":
          description: 3D model not found
    patch:
      summary: Update a 3D model
      operationId: update3DModel
      tags:
        - tag3DModel
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Input3DModel"
      responses:
        "200":
          description: 3D model updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/3DModel"
        "401":
          description: Unauthorized
        "404":
          description: 3D model not found
    delete:
      summary: Delete a 3D model
      operationId: delete3DModel
      tags:
        - tag3DModel
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: 3D model deleted successfully
        "401":
          description: Unauthorized
        "404":
          description: 3D model not found
  /texture:
    get:
      summary: Retrieve all textures
      operationId: getTextures
      tags:
        - tagTexture
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: Accept
          schema:
            type: string
            enum:
              - application/json
              - text/turtle
          required: false
          description: "Formato di risposta desiderato. Valori supportati: `application/json`,  `text/turtle`"
        - in: query
          name: "page"
          schema:
            type: integer
            default: 0
            minimum: 0
          description: "Numero della pagina (facoltativo, predefinito: 0). L'indice parte da 0."

        - in: query
          name: "size"
          schema:
            type: integer
            default: 20
            minimum: 1
          description: "Numero di elementi per pagina (facoltativo, predefinito: 20). Deve essere maggiore di 0."

        - in: query
          name: "sort"
          schema:
            type: string
            example: "name,asc"
          description: "Campo per l'ordinamento (facoltativo). Formato: `campo,direzione` (es. `name,asc`). Direzioni supportate: `asc`, `desc`."

      responses:
        "200":
          description: List of all available textures
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Texture"
        "401":
          description: Unauthorized
        "406":
          description: Formato non supportato
    post:
      summary: Add a texture to a 3D model
      operationId: createTexture
      security:
        - bearerAuth:
            - admin
            - editor
      tags:
        - tagTexture
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Texture"
      responses:
        "201":
          description: Texture successfully added
        "401":
          description: Unauthorized
  /texture/{id}:
    get:
      summary: Get a texture
      operationId: getTextureById
      tags:
        - tagTexture
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Texture retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Texture"
        "401":
          description: Unauthorized
        "404":
          description: Texture not found
    put:
      summary: Replace a texture
      operationId: replaceTexture
      tags:
        - tagTexture
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Texture"
      responses:
        "200":
          description: Texture replaced successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Texture"
        "401":
          description: Unauthorized
        "404":
          description: Texture not found
    patch:
      summary: Update a texture
      operationId: updateTexture
      tags:
        - tagTexture
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Texture"
      responses:
        "200":
          description: Texture updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Texture"
        "401":
          description: Unauthorized
        "404":
          description: Texture not found
    delete:
      summary: Delete a texture
      operationId: deleteTexture
      tags:
        - tagTexture
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Texture deleted successfully
        "401":
          description: Unauthorized
        "404":
          description: Texture not found
  /3d-annotation:
    get:
      summary: Retrieve all 3D annotations
      operationId: get3DAnnotations
      tags:
        - tag3DAnnotation
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: Accept
          schema:
            type: string
            enum:
              - application/json
              - text/turtle
          required: false
          description: "Formato di risposta desiderato. Valori supportati: `application/json`,  `text/turtle`"
        - in: query
          name: "page"
          schema:
            type: integer
            default: 0
            minimum: 0
          description: "Numero della pagina (facoltativo, predefinito: 0). L'indice parte da 0."

        - in: query
          name: "size"
          schema:
            type: integer
            default: 20
            minimum: 1
          description: "Numero di elementi per pagina (facoltativo, predefinito: 20). Deve essere maggiore di 0."

        - in: query
          name: "sort"
          schema:
            type: string
            example: "name,asc"
          description: "Campo per l'ordinamento (facoltativo). Formato: `campo,direzione` (es. `name,asc`). Direzioni supportate: `asc`, `desc`."
      responses:
        "200":
          description: List of all 3D annotations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Light3DAnnotation"
            text/turtle:
              schema:
                type: string
        "401":
          description: Unauthorized
        "406":
          description: Formato non supportato
    post:
      summary: Create a new 3D annotation
      operationId: create3DAnnotation
      security:
        - bearerAuth:
            - admin
            - editor

      tags:
        - tag3DAnnotation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Input3DAnnotation"
      responses:
        "201":
          description: 3D annotation successfully created
        "401":
          description: Unauthorized
  /3d-annotation/{annotationId}:
    get:
      summary: Get a 3D annotation
      operationId: get3DAnnotationById
      tags:
        - tag3DAnnotation
      security:
        - bearerAuth: []
      parameters:
        - name: annotationId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 3D annotation retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/3DAnnotation"
        "401":
          description: Unauthorized
        "404":
          description: 3D annotation not found
    put:
      summary: Replace a 3D annotation
      operationId: replace3DAnnotation
      tags:
        - tag3DAnnotation
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: annotationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Input3DAnnotation"
      responses:
        "200":
          description: 3D annotation replaced successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/3DAnnotation"
        "401":
          description: Unauthorized
        "404":
          description: 3D annotation not found

    patch:
      summary: Update a 3D annotation
      operationId: update3DAnnotation
      tags:
        - tag3DAnnotation
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: annotationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Input3DAnnotation"
      responses:
        "200":
          description: 3D annotation updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/3DAnnotation"
        "401":
          description: Unauthorized
        "404":
          description: 3D annotation not found

    delete:
      summary: Delete a 3D annotation
      operationId: delete3DAnnotation
      tags:
        - tag3DAnnotation
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: annotationId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: 3D annotation deleted successfully
        "401":
          description: Unauthorized
        "404":
          description: 3D annotation not found
  /3d-annotation/{annotationId}/annotations:
    get:
      operationId: getAnnotationsOf3dAnnotation
      security:
        - bearerAuth: []
      tags:
        - tag3DAnnotation/{id}/annotations
      summary: Get annotations of a 3D annotation
      description: returns a list of annotations with support for pagination, sorting and multiple formats.
      parameters:
        - in: path
          name: annotationId
          required: true
          schema:
            type: string
        - in: query
          name: "page"
          schema:
            type: integer
            default: 0
            minimum: 0
          description: "Numero della pagina (facoltativo, predefinito: 0). L'indice parte da 0."

        - in: query
          name: "size"
          schema:
            type: integer
            default: 20
            minimum: 1
          description: "Numero di elementi per pagina (facoltativo, predefinito: 20). Deve essere maggiore di 0."

        - in: query
          name: "sort"
          schema:
            type: string
            example: "createdDate,desc"
          description: "Campo per l'ordinamento (facoltativo). Formato: `campo,direzione` (es. `createdDate,desc`). Direzioni supportate: `asc`, `desc`."

        - in: header
          name: Accept
          schema:
            type: string
            enum:
              - application/json
              - text/turtle
          required: false
          description: "Formato di risposta desiderato. Valori supportati: `application/json`, `text/turtle`."
      responses:
        "200":
          description: Lista di annotazioni restituita con successo.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Annotation"
            text/turtle:
              schema:
                type: string
                example: "@prefix ex: <http://example.org/> . ex:annotation ex:prop 'valore' ."
        "406":
          description: Formato non supportato
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Formato richiesto non supportato"
                  supported_formats:
                    type: array
                    items:
                      type: string
                    example: ["application/json", "text/turtle"]
    post:
      summary: Add a new annotation to a 3D annotation
      operationId: createAnnotationOf3dAnnotation
      tags:
        - tag3DAnnotation/{id}/annotations
      parameters:
        - in: path
          name: annotationId
          required: true
          schema:
            type: string
      security:
        - bearerAuth:
            - admin
            - editor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Annotation"
      responses:
        "201":
          description: Annotation created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Annotation"
        "401":
          description: Unauthorized
        "404":
          description: 3D annotation not found

  # Insert the corrected /3d-model: path after the end of /3d-annotation/{annotationId}/annotations
  /3d-model2:
    get:
      summary: Retrieve all 3D models
      operationId: get3DModels2
      security:
        - bearerAuth: []
      tags:
        - tag3DModel
      parameters:
        - in: header
          name: Accept
          schema:
            type: string
            enum:
              - application/json
              - text/turtle
          required: false
          description: "Formato di risposta desiderato. Valori supportati: `application/json`,  `text/turtle`"
        - in: query
          name: "page"
          schema:
            type: integer
            default: 0
            minimum: 0
          description: "Numero della pagina (facoltativo, predefinito: 0). L'indice parte da 0."
        - in: query
          name: "size"
          schema:
            type: integer
            default: 20
            minimum: 1
          description: "Numero di elementi per pagina (facoltativo, predefinito: 20). Deve essere maggiore di 0."
        - in: query
          name: "sort"
          schema:
            type: string
            example: "name,asc"
          description: "Campo per l'ordinamento (facoltativo). Formato: `campo,direzione` (es. `name,asc`). Direzioni supportate: `asc`, `desc`."
      responses:
        "200":
          description: List of all 3D models
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Light3DModel"
            text/turtle:
              schema:
                type: string
        "401":
          description: Unauthorized
        "406":
          description: Formato non supportato
    post:
      summary: Create a new 3D model
      operationId: create3DModel
      security:
        - bearerAuth:
            - admin
            - editor
      tags:
        - tag3DModel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Input3DModel"
      responses:
        "201":
          description: 3D model successfully created
        "401":
          description: Unauthorized
  /3d-annotation/{3dAnnotationId}/annotations/{annotationId}:
    get:
      summary: Get an annotation  of a 3D annotation
      operationId: getAnnotationByIdof3dAnnotation
      tags:
        - tag3DAnnotation/{id}/annotations
      security:
        - bearerAuth: []
      parameters:
        - name: 3dAnnotationId
          in: path
          required: true
          schema:
            type: string
        - name: annotationId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Annotation retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Annotation"
        "401":
          description: Unauthorized
        "404":
          description: Annotation not found

    put:
      summary: Replace an annotation  of a 3D annotation
      operationId: replaceAnnotationOf3dAnnotation
      tags:
        - tag3DAnnotation/{id}/annotations
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: 3dAnnotationId
          in: path
          required: true
          schema:
            type: string
        - name: annotationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Annotation"
      responses:
        "200":
          description: Annotation replaced successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Annotation"
        "401":
          description: Unauthorized
        "404":
          description: Annotation not found

    patch:
      summary: Update an annotation  of a 3D annotation
      operationId: updateAnnotationOf3dAnnotation
      tags:
        - tag3DAnnotation/{id}/annotations
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: 3dAnnotationId
          in: path
          required: true
          schema:
            type: string
        - name: annotationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Annotation"
      responses:
        "200":
          description: Annotation updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Annotation"
        "401":
          description: Unauthorized
        "404":
          description: Annotation not found

    delete:
      summary: Delete an annotation  of a 3D annotation
      operationId: deleteAnnotationOf3dAnnotation
      tags:
        - tag3DAnnotation/{id}/annotations
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: 3dAnnotationId
          in: path
          required: true
          schema:
            type: string
        - name: annotationId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Annotation deleted successfully
        "401":
          description: Unauthorized
        "404":
          description: Annotation not found
  /3d-annotation/{3dAnnotationId}/3d-model/{3dMoldeId}:
    get:
      summary: Get a 3D model of a 3D annotation
      operationId: get3DModelByIdOf3dAnnotation
      tags:
        - tag3DAnnotation/{id}/3d-models
      security:
        - bearerAuth: []
      parameters:
        - name: 3dAnnotationId
          in: path
          required: true
          schema:
            type: string
        - name: 3dMoldeId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 3D model retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/3DModel"
        "401":
          description: Unauthorized
        "404":
          description: 3D model not found
    put:
      summary: Replace a 3D model of a 3D annotation
      operationId: replace3DModelOf3dAnnotation
      tags:
        - tag3DAnnotation/{id}/3d-models
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: 3dAnnotationId
          in: path
          required: true
          schema:
            type: string
        - name: 3dMoldeId
          in: path
          required: true
          schema:
            type: string

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Input3DModel"
      responses:
        "200":
          description: 3D model replaced successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/3DModel"
        "401":
          description: Unauthorized
        "404":
          description: 3D model not found
    patch:
      summary: Update a 3D model of a 3D annotation
      operationId: update3DModelOf3dAnnotation
      tags:
        - tag3DAnnotation/{id}/3d-models
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: 3dAnnotationId
          in: path
          required: true
          schema:
            type: string
        - name: 3dMoldeId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Input3DModel"
      responses:
        "200":
          description: 3D model updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/3DModel"
        "401":
          description: Unauthorized
        "404":
          description: 3D model not found
    delete:
      summary: Delete a 3D model of a 3D annotation
      operationId: delete3DModelOf3dAnnotation
      tags:
        - tag3DAnnotation/{id}/3d-models
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: 3dAnnotationId
          in: path
          required: true
          schema:
            type: string
        - name: 3dMoldeId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: 3D model deleted successfully
        "401":
          description: Unauthorized
        "404":
          description: 3D model not found

  /annotations:
    get:
      operationId: getAnnotations
      security:
        - bearerAuth: []
      tags:
        - tagAnnotation
      summary: Get annotations
      description: returns returns a list of annotations with support for pagination, sorting and multiple formats.
      parameters:
        - in: query
          name: "page"
          schema:
            type: integer
            default: 0
            minimum: 0
          description: "Numero della pagina (facoltativo, predefinito: 0). L'indice parte da 0."

        - in: query
          name: "size"
          schema:
            type: integer
            default: 20
            minimum: 1
          description: "Numero di elementi per pagina (facoltativo, predefinito: 20). Deve essere maggiore di 0."

        - in: query
          name: "sort"
          schema:
            type: string
            example: "createdDate,desc"
          description: "Campo per l'ordinamento (facoltativo). Formato: `campo,direzione` (es. `createdDate,desc`). Direzioni supportate: `asc`, `desc`."

        - in: header
          name: Accept
          schema:
            type: string
            enum:
              - application/json
              - text/turtle
          required: false
          description: "Formato di risposta desiderato. Valori supportati: `application/json`, `text/turtle`."
      responses:
        "200":
          description: Lista di annotazioni restituita con successo.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Annotation"
            text/turtle:
              schema:
                type: string
                example: "@prefix ex: <http://example.org/> . ex:annotation ex:prop 'valore' ."

        "406":
          description: Formato non supportato
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Formato richiesto non supportato"
                  supported_formats:
                    type: array
                    items:
                      type: string
                    example: ["application/json", "text/turtle"]
    post:
      summary: Create a new annotation
      operationId: createAnnotation
      tags:
        - tagAnnotation
      security:
        - bearerAuth:
            - admin
            - editor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Annotation"
      responses:
        "201":
          description: Annotation created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Annotation"
        "401":
          description: Unauthorized
  /annotations/{id}:
    get:
      summary: Get an annotation
      operationId: getAnnotationById
      tags:
        - tagAnnotation
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Annotation retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Annotation"
        "401":
          description: Unauthorized
        "404":
          description: Annotation not found

    put:
      summary: Replace an annotation
      operationId: replaceAnnotation
      tags:
        - tagAnnotation
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Annotation"
      responses:
        "200":
          description: Annotation replaced successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Annotation"
        "401":
          description: Unauthorized
        "404":
          description: Annotation not found

    patch:
      summary: Update an annotation
      operationId: updateAnnotation
      tags:
        - tagAnnotation
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Annotation"
      responses:
        "200":
          description: Annotation updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Annotation"
        "401":
          description: Unauthorized
        "404":
          description: Annotation not found

    delete:
      summary: Delete an annotation
      operationId: deleteAnnotation
      tags:
        - tagAnnotation
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Annotation deleted successfully
        "401":
          description: Unauthorized
        "404":
          description: Annotation not found
  /illuminated-scenes:
    get:
      operationId: getIlluminatedManuscriptScenes
      tags:
        - tagIlluminatedScene
      summary: "Retrieve all illuminated manuscript scenes"
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: "id"
          required: false
          schema:
            type: array
            items:
              type: string
          description: "Filtra illuminated manuscript scenes per ID, valori multipli separati da virgola ad es. `1,2,3`"
        - in: query
          name: "title"
          required: false
          schema:
            type: string
          description: "Filtra illuminated manuscript scenes per titolo"
        - in: query
          name: "description"
          required: false
          schema:
            type: string
          description: "Filtra illuminated manuscript scenes per descrizione"
        - in: query
          name: status
          required: false
          schema:
            type: string
            enum:
              - draft
              - in_review
              - revisions_required
              - accepted
              - in_editing
              - published
              - rejected
              - withdrawn
          description: |
            Filtra illuminated manuscript scenes in base al loro stato:
              - `draft`: Bozza
              - `in_review`: In revisione
              - `revisions_required`: Revisione necessaria
              - `accepted`: Accettato
              - `in_editing`: In fase di editing
              - `published`: Pubblicato
              - `rejected`: Rifiutato
              - `withdrawn`: Ritirato
        - in: query
          name: "locations"
          required: false
          schema:
            type: string
          description: "Filtra illuminated manuscript scenes per nome location"
        - in: query
          name: "locationId"
          required: false
          schema:
            type: array
            items:
              type: string
          description: "Filtra illuminated manuscript scenes per location ID, valori multipli separati da virgola ad es. `1,2,3`"
        - in: query
          name: "authors"
          required: false
          schema:
            type: string
          description: "Filtra illuminated manuscript scenes per nome autore"
        - in: query
          name: "authorId"
          required: false
          schema:
            type: array
            items:
              type: string
          description: "filtra illuminated manuscript scenes per autore ID, valori multipli separati da virgola ad es. `1,2,3`"
        - in: query
          name: "editors"
          required: false
          schema:
            type: string
          description: "Filtra illuminated manuscript scenes per nome editor"
        - in: query
          name: "editorId"
          required: false
          schema:
            type: array
            items:
              type: string
          description: "filtra illuminated manuscript scenes per editor ID, valori multipli separati da virgola ad es. `1,2,3`"

        - in: query
          name: "identifiers"
          required: false
          schema:
            type: array
            items:
              type: string
          description: "Filtra illuminated manuscript scenes per identificatore, valori multipli separati da virgola ad es. `1,2,3`"
        - in: query
          name: "page"
          schema:
            type: integer
            default: 0
            minimum: 0
          description: "Numero della pagina (facoltativo, predefinito: 0). L'indice parte da 0."

        - in: query
          name: "size"
          schema:
            type: integer
            default: 20
            minimum: 1
          description: "Numero di elementi per pagina (facoltativo, predefinito: 20). Deve essere maggiore di 0."

        - in: query
          name: "sort"
          schema:
            type: string
            example: "createdDate,desc"
          description: "Campo per l'ordinamento (facoltativo). Formato: `campo,direzione` (es. `createdDate,desc`). Direzioni supportate: `asc`, `desc`."

        - in: header
          name: Accept
          schema:
            type: string
            enum:
              - application/json
              - text/turtle
          required: false
          description: "Formato di risposta desiderato. Valori supportati: `application/json`, `text/turtle`."

      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LightIlluminatedScene"
            text/turtle:
              schema:
                type: string
        "401":
          description: "Unauthorized"
        "406":
          description: "Formato non supportato"
    post:
      tags:
        - tagIlluminatedScene
      summary: "Create a new illuminated manuscript scene"
      operationId: createIlluminatedManuscriptScene
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LightIlluminatedScene"
      security:
        - bearerAuth:
            - admin
            - editor
      responses:
        "201":
          description: "Scene created successfully"
        "401":
          description: "Unauthorized"
  /illuminated-scenes/{id}:
    get:
      tags:
        - tagIlluminatedScene
      summary: "Retrieve a specific illuminated manuscript scene "
      security:
        - bearerAuth: []
      operationId: getIlluminatedManuscriptScene
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - in: header
          name: Accept
          schema:
            type: string
            enum:
              - application/json
              - text/turtle
          required: false
          description: "Formato di risposta desiderato. Valori supportati: `application/json`, `text/turtle`."

      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IlluminatedScene"
            text/turtle:
              schema:
                type: string
        "401":
          description: "Unauthorized"
        "404":
          description: "Scene not found"
        "406":
          description: "Formato non supportato"
    put:
      tags:
        - tagIlluminatedScene
      summary: "Update an entire illuminated manuscript scene "
      operationId: putIlluminatedManuscriptScene
      security:
        - bearerAuth:
            - admin
            - editor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LightIlluminatedScene"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Scene updated successfully"
        "401":
          description: "Unauthorized"
        "404":
          description: "Scene not found"
    patch:
      tags:
        - tagIlluminatedScene
      summary: "Partially update an illuminated manuscript scene "
      operationId: patchIlluminatedManuscriptScene
      security:
        - bearerAuth:
            - admin
            - editor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LightIlluminatedScene"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Scene patched successfully"
        "401":
          description: "Unauthorized"
        "404":
          description: "Scene not found"
    delete:
      operationId: deleteIlluminatedManuscriptScene
      security:
        - bearerAuth:
            - admin
            - editor
      tags:
        - tagIlluminatedScene
      summary: "Delete an illuminated manuscript scene "
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "Scene deleted successfully"
        "401":
          description: "Unauthorized"
        "404":
          description: "Scene not found"
  /illuminated-scenes/{illuminatedSceneId}/3d-annotations:
    get:
      operationId: get3DAnnotationsOfIlluminatedScene
      tags:
        - tagIlluminatedScene/{id}/3d-annotations
      summary: Get 3D annotations of an illuminated scene
      description: returns a list of 3D annotations with support for pagination, sorting and multiple formats.
      parameters:
        - in: path
          name: illuminatedSceneId
          required: true
          schema:
            type: string
        - in: query
          name: "page"
          schema:
            type: integer
            default: 0
            minimum: 0
          description: "Numero della pagina (facoltativo, predefinito: 0). L'indice parte da 0."

        - in: query
          name: "size"
          schema:
            type: integer
            default: 20
            minimum: 1
          description: "Numero di elementi per pagina (facoltativo, predefinito: 20). Deve essere maggiore di 0."

        - in: query
          name: "sort"
          schema:
            type: string
            example: "createdDate,desc"
          description: "Campo per l'ordinamento (facoltativo). Formato: `campo,direzione` (es. `createdDate,desc`). Direzioni supportate: `asc`, `desc`."

        - in: header
          name: Accept
          schema:
            type: string
            enum:
              - application/json
              - text/turtle
          required: false
          description: "Formato di risposta desiderato. Valori supportati: `application/json`, `text/turtle`."
      responses:
        "200":
          description: Lista di annotazioni 3D restituita con successo.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/3DAnnotation"
            text/turtle:
              schema:
                type: string
        "406":
          description: Formato non supportato
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Formato richiesto non supportato"
                  supported_formats:
                    type: array
                    items:
                      type: string
    post:
      summary: Add a new 3D annotation to an illuminated scene
      operationId: create3DAnnotationOfIlluminatedScene
      tags:
        - tagIlluminatedScene/{id}/3d-annotations
      parameters:
        - in: path
          name: illuminatedSceneId
          required: true
          schema:
            type: string
      security:
        - bearerAuth:
            - admin
            - editor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Input3DAnnotation"
      responses:
        "201":
          description: 3D annotation created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/3DAnnotation"
        "401":
          description: Unauthorized
  /illuminated-scenes/{illuminatedSceneId}/3d-annotations/{3dAnnotationId}:
    get:
      summary: Get a 3D annotation of an illuminated scene
      operationId: get3DAnnotationByIdOfIlluminatedScene
      tags:
        - tagIlluminatedScene/{id}/3d-annotations
      security:
        - bearerAuth: []
      parameters:
        - name: illuminatedSceneId
          in: path
          required: true
          schema:
            type: string
        - name: 3dAnnotationId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 3D annotation retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/3DAnnotation"
        "401":
          description: Unauthorized
        "404":
          description: 3D annotation not found

    put:
      summary: Replace a 3D annotation of an illuminated scene
      operationId: replace3DAnnotationOfIlluminatedScene
      tags:
        - tagIlluminatedScene/{id}/3d-annotations
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: illuminatedSceneId
          in: path
          required: true
          schema:
            type: string
        - name: 3dAnnotationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Input3DAnnotation"
      responses:
        "200":
          description: 3D annotation replaced successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/3DAnnotation"
        "401":
          description: Unauthorized
        "404":
          description: 3D annotation not found
    patch:
      summary: Update a 3D annotation of an illuminated scene
      operationId: update3DAnnotationOfIlluminatedScene
      tags:
        - tagIlluminatedScene/{id}/3d-annotations
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: illuminatedSceneId
          in: path
          required: true
          schema:
            type: string
        - name: 3dAnnotationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Input3DAnnotation"
      responses:
        "200":
          description: 3D annotation updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/3DAnnotation"
        "401":
          description: Unauthorized
        "404":
          description: 3D annotation not found
    delete:
      summary: Delete a 3D annotation of an illuminated scene
      operationId: delete3DAnnotationOfIlluminatedScene
      tags:
        - tagIlluminatedScene/{id}/3d-annotations
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: illuminatedSceneId
          in: path
          required: true
          schema:
            type: string
        - name: 3dAnnotationId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: 3D annotation deleted successfully
        "401":
          description: Unauthorized
        "404":
          description: 3D annotation not found
  /illuminated-scenes/{illuminatedSceneId}/authors:
    get:
      operationId: getAuthorsOfIlluminatedScene
      tags:
        - tagIlluminatedScene/{id}/authors
      summary: Get authors of an illuminated scene
      description: returns a list of authors with support for pagination, sorting and multiple formats.
      parameters:
        - in: path
          name: illuminatedSceneId
          required: true
          schema:
            type: string
        - in: query
          name: "page"
          schema:
            type: integer
            default: 0
            minimum: 0
          description: "Numero della pagina (facoltativo, predefinito: 0). L'indice parte da 0."

        - in: query
          name: "size"
          schema:
            type: integer
            default: 20
            minimum: 1
          description: "Numero di elementi per pagina (facoltativo, predefinito: 20). Deve essere maggiore di 0."

        - in: query
          name: "sort"
          schema:
            type: string
            example: "createdDate,desc"
          description: "Campo per l'ordinamento (facoltativo). Formato: `campo,direzione` (es. `createdDate,desc`). Direzioni supportate: `asc`, `desc`."

        - in: header
          name: Accept
          schema:
            type: string
            enum:
              - application/json
              - text/turtle
          required: false
          description: "Formato di risposta desiderato. Valori supportati: `application/json`, `text/turtle`."
      responses:
        "200":
          description: Lista di autori restituita con successo.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Person"
            text/turtle:
              schema:
                type: string
        "406":
          description: Formato non supportato
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Formato richiesto non supportato"
                  supported_formats:
                    type: array
                    items:
                      type: string
    post:
      summary: Add a new author to an illuminated
      operationId: createAuthorOfIlluminatedScene
      tags:
        - tagIlluminatedScene/{id}/authors
      parameters:
        - in: path
          name: illuminatedSceneId
          required: true
          schema:
            type: string
      security:
        - bearerAuth:
            - admin
            - editor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Person"
      responses:
        "201":
          description: Author created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
  /illuminated-scenes/{illuminatedSceneId}/authors/{authorId}:
    get:
      summary: Get an author of an illuminated scene
      operationId: getAuthorByIdOfIlluminatedScene
      tags:
        - tagIlluminatedScene/{id}/authors
      security:
        - bearerAuth: []
      parameters:
        - name: illuminatedSceneId
          in: path
          required: true
          schema:
            type: string
        - name: authorId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Author retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
        "404":
          description: Author not found

    put:
      summary: Replace an author of an illuminated scene
      operationId: replaceAuthorOfIlluminatedScene
      tags:
        - tagIlluminatedScene/{id}/authors
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: illuminatedSceneId
          in: path
          required: true
          schema:
            type: string
        - name: authorId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Person"
      responses:
        "200":
          description: Author replaced successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
        "404":
          description: Author not found
    patch:
      summary: Update an author of an illuminated scene
      operationId: updateAuthorOfIlluminatedScene
      tags:
        - tagIlluminatedScene/{id}/authors
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: illuminatedSceneId
          in: path
          required: true
          schema:
            type: string
        - name: authorId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Person"
      responses:
        "200":
          description: Author updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
        "404":
          description: Author not found
    delete:
      summary: Delete an author of an illuminated scene
      operationId: deleteAuthorOfIlluminatedScene
      tags:
        - tagIlluminatedScene/{id}/authors
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: illuminatedSceneId
          in: path
          required: true
          schema:
            type: string
        - name: authorId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Author deleted successfully
        "401":
          description: Unauthorized
        "404":
          description: Author not found
  /illuminated-scenes/{illuminatedSceneId}/editors:
    get:
      operationId: getEditorsOfIlluminatedScene
      tags:
        - tagIlluminatedScene/{id}/editors
      summary: Get editors of an illuminated scene
      description: returns a list of editors with support for pagination, sorting and multiple formats.
      parameters:
        - in: path
          name: illuminatedSceneId
          required: true
          schema:
            type: string
        - in: query
          name: "page"
          schema:
            type: integer
            default: 0
            minimum: 0
          description: "Numero della pagina (facoltativo, predefinito: 0). L'indice parte da 0."

        - in: query
          name: "size"
          schema:
            type: integer
            default: 20
            minimum: 1
          description: "Numero di elementi per pagina (facoltativo, predefinito: 20). Deve essere maggiore di 0."

        - in: query
          name: "sort"
          schema:
            type: string
            example: "createdDate,desc"
          description: "Campo per l'ordinamento (facoltativo). Formato: `campo,direzione` (es. `createdDate,desc`). Direzioni supportate: `asc`, `desc`."

        - in: header
          name: Accept
          schema:
            type: string
            enum:
              - application/json
              - text/turtle
          required: false
          description: "Formato di risposta desiderato. Valori supportati: `application/json`, `text/turtle`."
      responses:
        "200":
          description: Lista di editori restituita con successo.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Person"
            text/turtle:
              schema:
                type: string
        "406":
          description: Formato non supportato
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Formato richiesto non supportato"
                  supported_formats:
                    type: array
                    items:
                      type: string
    post:
      summary: Add a new editor to an
      operationId: createEditorOfIlluminatedScene
      tags:
        - tagIlluminatedScene/{id}/editors
      parameters:
        - in: path
          name: illuminatedSceneId
          required: true
          schema:
            type: string
      security:
        - bearerAuth:
            - admin
            - editor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Person"
      responses:
        "201":
          description: Editor created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
  /illuminated-scenes/{illuminatedSceneId}/editors/{editorId}:
    get:
      summary: Get an editor of an illuminated scene
      operationId: getEditorByIdOfIlluminatedScene
      tags:
        - tagIlluminatedScene/{id}/editors
      security:
        - bearerAuth: []
      parameters:
        - name: illuminatedSceneId
          in: path
          required: true
          schema:
            type: string
        - name: editorId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Editor retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
        "404":
          description: Editor not found

    put:
      summary: Replace an editor of an illuminated scene
      operationId: replaceEditorOfIlluminatedScene
      tags:
        - tagIlluminatedScene/{id}/editors
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: illuminatedSceneId
          in: path
          required: true
          schema:
            type: string
        - name: editorId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Person"
      responses:
        "200":
          description: Editor replaced successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
        "404":
          description: Editor not found
    patch:
      summary: Update an editor of an illuminated scene
      operationId: updateEditorOfIlluminatedScene
      tags:
        - tagIlluminatedScene/{id}/editors
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: illuminatedSceneId
          in: path
          required: true
          schema:
            type: string
        - name: editorId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Person"
      responses:
        "200":
          description: Editor updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
        "404":
          description: Editor not found
    delete:
      summary: Delete an editor of an illuminated scene
      operationId: deleteEditorOfIlluminatedScene
      tags:
        - tagIlluminatedScene/{id}/editors
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - name: illuminatedSceneId
          in: path
          required: true
          schema:
            type: string
        - name: editorId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Editor deleted successfully
        "401":
          description: Unauthorized
        "404":
          description: Editor not found
  /illuminated-scenes/{illuminatedSceneId}/poses:
    get:
      operationId: getPosa3DOfIlluminatedScene
      tags:
        - tagIlluminatedScene/{id}/poses
      summary: Get poses of an illuminated scene
      description: returns a list of poses with support for pagination, sorting and multiple formats.
      parameters:
        - in: path
          name: illuminatedSceneId
          required: true
          schema:
            type: string
        - in: query
          name: "page"
          schema:
            type: integer
            default: 0
            minimum: 0
          description: "Numero della pagina (facoltativo, predefinito: 0). L'indice parte da 0."

        - in: query
          name: "size"
          schema:
            type: integer
            default: 20
            minimum: 1
          description: "Numero di elementi per pagina (facoltativo, predefinito: 20). Deve essere maggiore di 0."

        - in: query
          name: "sort"
          schema:
            type: string
            example: "createdDate,desc"
          description: "Campo per l'ordinamento (facoltativo). Formato: `campo,direzione` (es. `createdDate,desc`). Direzioni supportate: `asc`, `desc`."

        - in: header
          name: Accept
          schema:
            type: string
            enum:
              - application/json
              - text/turtle
          required: false
          description: "Formato di risposta desiderato. Valori supportati: `application/json`, `text/turtle`."
      responses:
        "200":
          description: Lista di pose restituita con successo.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Posa3D"
            text/turtle:
              schema:
                type: string
        "406":
          description: Formato non supportato
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
          example: "Formato richiesto non supportato"

  /authors/{id}/manuscripts:
    get:
      tags:
        - tagAuthor
      summary: "Get all manuscripts of an author"
      description: "This operation retrieves all manuscripts for an author."
      operationId: "getManuscriptsOfAuthor"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: header
          name: Accept
          schema:
            type: string
            enum:
              - application/json
              - text/turtle
          required: false
          description: "Formato di risposta desiderato. Valori supportati: `application/json`,  `text/turtle`"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LightManuscript"
        "401":
          description: "Unauthorized"
        "404":
          description: "Author not found"
        "406":
          description: "Formato non supportato"
  /editors/{id}/manuscripts:
    get:
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: header
          name: Accept
          schema:
            type: string
            enum:
              - application/json
              - text/turtle
          required: false
          description: "Formato di risposta desiderato. Valori supportati: `application/json`,  `text/turtle`"

      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LightManuscript"
        "401":
          description: "Unauthorized"
        "404":
          description: "Editor not found"
        "406":
          description: "Formato non supportato"
      tags:
        - tagEditors
      summary: "Get all manuscripts of an editor"
      description: "This operation retrieves all manuscripts of am editor."
      operationId: "getManuscriptsOfEditor"
  /editors/{id}/scenes:
    get:
      security:
        - bearerAuth:
            - admin
            - editor
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: header
          name: Accept
          schema:
            type: string
            enum:
              - application/json
              - text/turtle
          required: false
          description: "Formato di risposta desiderato. Valori supportati: `application/json`,  `text/turtle`"

      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LightIlluminatedScene"
        "401":
          description: "Unauthorized"
        "404":
          description: "Editor not found"
        "406":
          description: "Formato non supportato"
      tags:
        - tagEditors
      summary: "Get all scenes of an editor"
      description: "This operation retrieves all scenes for an editor."
      operationId: "getScenesOfEditor"
  /iot/sennse/imports:
    post:
      tags:
        - tagSENNSE
      summary: Importa un pacchetto dati da SENNSE
      description: |
        Riceve un pacchetto dati esportato da SENNSE (Thingsboard): serie temporali,
        metadati e annotazioni. Crea un job di import e restituisce lo stato iniziale.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SennseImportPackage"
      responses:
        "202":
          description: Job di import accettato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportJob"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "401":
          description: Unauthorized
    get:
      tags:
        - tagSENNSE
      summary: Lista job di import SENNSE
      description: Restituisce la lista dei job di import creati per l'integrazione SENNSE.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            $ref: "#/components/schemas/ImportStatus"
          required: false
          description: Filtra per stato del job.
        - in: query
          name: page
          schema:
            type: integer
            minimum: 0
            default: 0
        - in: query
          name: size
          schema:
            type: integer
            minimum: 1
            default: 20
      responses:
        "200":
          description: Elenco job
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ImportJob"
        "401":
          description: Unauthorized

  /iot/sennse/imports/{id}:
    get:
      tags:
        - tagSENNSE
      summary: Dettaglio job di import
      description: Restituisce lo stato e i dettagli del job di import SENNSE.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Dettaglio job
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportJob"
        "401":
          description: Unauthorized
        "404":
          description: Job non trovato
    delete:
      tags:
        - tagSENNSE
      summary: Annulla job di import
      description: Annulla il job se ancora in esecuzione.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Job annullato
        "401":
          description: Unauthorized
        "404":
          description: Job non trovato
    patch:
      tags:
        - tagSENNSE
      summary: Aggiorna metadati del job di import
      description: Aggiorna parzialmente i metadati (es. nomeOsservazione, selezioni, ecc.).
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SennseImportPatch"
      responses:
        "200":
          description: Job aggiornato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportJob"
        "401":
          description: Unauthorized
        "404":
          description: Job non trovato

  /iot/sennse/imports/{id}/package:
    put:
      tags:
        - tagSENNSE
      summary: Sostituisce l'intero pacchetto (one-shot)
      description: Rimpiazza completamente dati e metadati del job indicato.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SennseImportPackage"
      responses:
        "202":
          description: Import aggiornato (elaborazione in corso)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportJob"
        "401":
          description: Unauthorized
        "404":
          description: Job non trovato

  /iot/sennse/imports/{id}/data:
    post:
      tags:
        - tagSENNSE
      summary: Aggiunge un blocco di dati (chunk)
      description: |
        Appende uno o più set di serie temporali al job indicato. Idempotente via header opzionale `Idempotency-Key`.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: header
          name: Idempotency-Key
          required: false
          schema:
            type: string
          description: Chiave per rendere idempotente l'invio del chunk.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SennseDataChunk"
      responses:
        "202":
          description: Chunk accettato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportJob"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Job non trovato

  /iot/sennse/imports/{id}/finalize:
    post:
      tags:
        - tagSENNSE
      summary: Finalizza il job di import
      description: |
        Tenta la transizione di stato a `COMPLETED`. Il server valida che tutti i chunk siano stati processati.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FinalizeRequest"
      responses:
        "200":
          description: Job finalizzato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportJob"
        "409":
          description: Stato non valido per la finalizzazione
        "401":
          description: Unauthorized
        "404":
          description: Job non trovato
components:
  schemas:
    Identifier:
      type: object
      properties:
        type:
          type: string
        standard:
          type: string
        value:
          type: string
    Extension:
      type: object
      properties:
        uri:
          type: string
        value:
          type: string
    Base:
      type: object
      properties:
        id:
          type: string
          description: |
            Unique identifier for the object. It could not be send in POST
        identifiers:
          type: array
          items:
            $ref: "#/components/schemas/Identifier"
        extensions:
          type: array
          items:
            $ref: "#/components/schemas/Extension"
    Person:
      x-tags:
        - Model
      description: A person object
      allOf:
        - $ref: "#/components/schemas/Base"
      type: object
      properties:
        firstName:
          type: string
          description: The person's first name
        lastName:
          type: string
          description: The person's last name
        department:
          type: string
          description: The person's department
        birthDate:
          type: string
          format: date
          description: The person's birthDate
        deathDate:
          type: string
          format: date
          description: The person's deathDate
      required:
        - firstName
        - lastName
        - department
    Period:
      type: object
      properties:
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
      required:
        - start
    Project:
      allOf:
        - $ref: "#/components/schemas/Base"
      type: object
      properties:
        periods:
          type: object
          $ref: "#/components/schemas/Period"
    Location:
      allOf:
        - $ref: "#/components/schemas/Base"
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        address:
          type: string
        coordinates:
          type: array
          items:
            type: number
          minItems: 2
          maxItems: 2
    Event:
      allOf:
        - $ref: "#/components/schemas/Base"
      type: object
      properties:
        type:
          type: string
        Period:
          type: object
          $ref: "#/components/schemas/Period"
        Location:
          type: object
          $ref: "#/components/schemas/Location"
    Manuscript:
      allOf:
        - $ref: "#/components/schemas/Base"
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        creationDate:
          type: string
          format: date-time
        publicationDate:
          type: string
          format: date-time
        previewImage:
          type: string
          format: uri
        events:
          type: array
          items:
            $ref: "#/components/schemas/Reference"
        projects:
          type: array
          items:
            $ref: "#/components/schemas/Reference"
        locations:
          type: array
          items:
            $ref: "#/components/schemas/Location"
        contents:
          type: array
          items:
            $ref: "#/components/schemas/LighContent"
        authors:
          type: array
          items:
            $ref: "#/components/schemas/Reference"
        editors:
          type: array
          items:
            $ref: "#/components/schemas/Reference"
        viewers:
          type: array
          items:
            $ref: "#/components/schemas/Reference"
        illuminated-scenes:
          type: array
          items:
            $ref: "#/components/schemas/LightIlluminatedScene"
        status:
          type: string
          enum:
            - draft
            - in_review
            - revisions_required
            - accepted
            - in_editing
            - published
            - rejected
            - withdrawn
          description: |
            Stato attuale del manoscritto:
              - `draft`: Bozza
              - `in_review`: In revisione
              - `revisions_required`: Revisione necessaria
              - `accepted`: Accettato
              - `in_editing`: In fase di editing
              - `published`: Pubblicato
              - `rejected`: Rifiutato
              - `withdrawn`: Ritirato
    Posa3D:
      allOf:
        - $ref: "#/components/schemas/Base"
      type: object
      properties:
        name:
          type: string
          description: Name of the pose
        3d-models:
          type: array
          items:
            $ref: "#/components/schemas/3DModel"
          description: List of 3D models associated with the pose
        contents:
          type: array
          items:
            $ref: "#/components/schemas/LighContent"
    InputPose:
      allOf:
        - $ref: "#/components/schemas/Base"
      type: object
      properties:
        name:
          type: string
          description: Name of the pose
    LightPose:
      allOf:
        - $ref: "#/components/schemas/Base"
      type: object
      properties:
        name:
          type: string
          description: Name of the pose
        models:
          type: array
          items:
            $ref: "#/components/schemas/Reference"
          description: List of 3D models associated with the pose
        contents:
          type: array
          items:
            $ref: "#/components/schemas/Reference"
    3DModel:
      allOf:
        - $ref: "#/components/schemas/Base"
      type: object
      properties:
        name:
          type: string
          description: Name of the 3D model
        textures:
          type: array
          items:
            $ref: "#/components/schemas/Texture"
          description: List of textures associated with the 3D model
        annotations:
          type: array
          items:
            $ref: "#/components/schemas/3DAnnotation"
          description: List of 3D annotations linked to the model
    Input3DModel:
      allOf:
        - $ref: "#/components/schemas/Base"
      type: object
      properties:
        name:
          type: string
          description: Name of the 3D model
    Light3DModel:
      type: object
      properties:
        name:
          type: string
          description: Name of the 3D model
        textures:
          type: array
          items:
            $ref: "#/components/schemas/Reference"
          description: List of textures associated with the 3D model
        annotations:
          type: array
          items:
            $ref: "#/components/schemas/Reference"
          description: List of 3D annotations linked to the model
    Texture:
      allOf:
        - $ref: "#/components/schemas/Base"
      type: object
      properties:
        type:
          type: string
          enum:
            - RGB
            - IR1
            - IR2
            - UV
          description: Texture type (RGB, IR1, IR2, UV)
        fileUrl:
          type: string
          format: uri
          description: URL of the texture image
    3DAnnotation:
      allOf:
        - $ref: "#/components/schemas/Base"
      type: object
      properties:
        authors:
          type: array
          items:
            $ref: "#/components/schemas/Reference"
        region:
          type: string
          description: 3D region where the annotation applies
        annotation:
          $ref: "#/components/schemas/Annotation"
        model:
          $ref: "#/components/schemas/3DModel"
    Input3DAnnotation:
      allOf:
        - $ref: "#/components/schemas/Base"
      type: object
      properties:
        region:
          type: string
          description: 3D region where the annotation applies
    Light3DAnnotation:
      allOf:
        - $ref: "#/components/schemas/Base"
      type: object
      properties:
        region:
          type: string
          description: 3D region where the annotation applies
        annotation:
          $ref: "#/components/schemas/Reference"
        model:
          $ref: "#/components/schemas/Reference"
    Annotation:
      allOf:
        - $ref: "#/components/schemas/Base"
      type: object
      properties:
        category:
          type: string
          enum:
            - text
            - image
            - video
            - audio
          description: Annotation type (text, image, video, audio)
        content:
          type: string
          description: Content of the annotation (text, image URL, video URL, audio URL)
    LightIlluminatedScene:
      type: object
      properties:
        title:
          type: string
          description: "Title of the scene"
        description:
          type: string
          description: "Description of the scene"
        panorama:
          type: string
          format: uri
          description: "Panoramic view of the scene"
        previewImage:
          type: string
          format: uri
          description: "Preview image of the scene"
        authors:
          type: array
          items:
            $ref: "#/components/schemas/Reference"
          description: "List of authors of the scene"
        editors:
          type: array
          items:
            $ref: "#/components/schemas/Reference"
          description: "List of editors"
        visibility:
          type: string
          enum: [public, private, restricted]
          description: "Visibility status of the scene"
        project:
          $ref: "#/components/schemas/Reference"
          description: "Reference project for the scene"
        manuscript:
          $ref: "#/components/schemas/Reference"
          description: "Reference manuscript for the scene"
        poses:
          type: array
          items:
            $ref: "#/components/schemas/Reference"
          description: "List of poses"
        annotations3D:
          type: array
          items:
            $ref: "#/components/schemas/Reference"
          description: "List of 3D annotations"
    IlluminatedScene:
      type: object
      properties:
        title:
          type: string
          description: "Title of the scene"
        description:
          type: string
          description: "Description of the scene"
        panorama:
          type: string
          format: uri
          description: "Panoramic view of the scene"
        previewImage:
          type: string
          format: uri
          description: "Preview image of the scene"
        authors:
          type: array
          items:
            $ref: "#/components/schemas/Reference"
          description: "List of authors of the scene"
        editors:
          type: array
          items:
            $ref: "#/components/schemas/Reference"
          description: "List of editors"
        visibility:
          type: string
          enum: [public, private, restricted]
          description: "Visibility status of the scene"
        project:
          $ref: "#/components/schemas/Reference"
          description: "Reference project for the scene"
        manuscript:
          $ref: "#/components/schemas/Reference"
          description: "Reference manuscript for the scene"
        poses:
          type: array
          items:
            $ref: "#/components/schemas/Posa3D"
          description: "List of poses"
        annotations3D:
          type: array
          items:
            $ref: "#/components/schemas/3DAnnotation"
          description: "List of 3D annotations"
    InputIlluminatedScene:
      type: object
      properties:
        title:
          type: string
          description: "Title of the scene"
        description:
          type: string
          description: "Description of the scene"
        panorama:
          type: string
          format: uri
          description: "Panoramic view of the scene"
        previewImage:
          type: string
          format: uri
          description: "Preview image of the scene"
        visibility:
          type: string
          enum: [public, private, restricted]
          description: "Visibility status of the scene"
        project:
          $ref: "#/components/schemas/Reference"
          description: "Reference project for the scene"
        manuscript:
          $ref: "#/components/schemas/Reference"
          description: "Reference manuscript for the scene"
        poses:
          type: array
          items:
            $ref: "#/components/schemas/Reference"
          description: "List of poses"
        annotations3D:
          type: array
          items:
            $ref: "#/components/schemas/Reference"
          description: "List of 3D annotations"

    LightManuscript:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        previewImage:
          type: string
          format: uri
        events:
          type: array
          items:
            $ref: "#/components/schemas/Reference"
        projects:
          type: array
          items:
            $ref: "#/components/schemas/Reference"
        locations:
          type: array
          items:
            $ref: "#/components/schemas/Reference"
        scenes:
          type: array
          items:
            $ref: "#/components/schemas/Reference"
        authors:
          type: array
          items:
            $ref: "#/components/schemas/Reference"
        editors:
          type: array
          items:
            $ref: "#/components/schemas/Reference"
        status:
          type: string
          enum:
            - draft
            - in_review
            - revisions_required
            - accepted
            - in_editing
            - published
            - rejected
            - withdrawn
          description: |
            Stato attuale del manoscritto:
              - `draft`: Bozza
              - `in_review`: In revisione
              - `revisions_required`: Revisione necessaria
              - `accepted`: Accettato
              - `in_editing`: In fase di editing
              - `published`: Pubblicato
              - `rejected`: Rifiutato
              - `withdrawn`: Ritirato
    Reference:
      type: object
      description: Una reference da una risorsa a un'altra
      properties:
        reference:
          type: string
          description: Literal reference, URL relativa, interna o assoluta
        type:
          type: string
          format: uri
          description: Tipo della risorsa a cui fa riferimento (es. "Patient")
        identifier:
          type: object
          description: Riferimento logico quando non si conosce il riferimento letterale
          properties:
            system:
              type: string
              description: Sistema identificativo
            value:
              type: string
              description: Valore dell'identificatore
        display:
          type: string
          description: Testo alternativo per la risorsa
      required:
        - reference
      example:
        reference: "Risorsa/1234"
        type: "Risorsa"
        identifier:
          system: "http://digilab.com/risorsa-ids"
          value: "1234"
        display: "descrizione della risorsa"
    Content:
      type: object
      properties:
        id:
          type: integer
        manuscript_id:
          type: integer
        intro:
          type: string
        category:
          type: string
          enum:
            - Storia e contesto
            - Struttura e scrittura
            - Materiali e tecniche esecutive
            - Iconografia e iconologia
            - Censure e modifiche
            - Conservazione e restauro
            - Bibliografia
        content:
          type: string
        last_updated:
          type: string
          format: date-time
        language:
          type: string
          enum:
            - it
            - en
            - fr
            - de
            - es
          description: Lingua del contenuto
        description:
          type: string
          description: Descrizione del contenuto
        annotations:
          type: array
          items:
            $ref: "#/components/schemas/3DAnnotation"
          description: Lista di annotazioni 3D associate al contenuto
      example:
        id: 1
        manuscript_id: 1
        category: "Storia e contesto"
        content: "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
        last_updated: "2021-09-01T12:00:00Z"
    LighContent:
      type: object
      required:
        - category
        - content
      properties:
        intro:
          type: string
        category:
          type: string
          enum:
            - Storia e contesto
            - Struttura e scrittura
            - Materiali e tecniche esecutive
            - Iconografia e iconologia
            - Censure e modifiche
            - Conservazione e restauro
            - Bibliografia
        content:
          type: string
        language:
          type: string
          enum:
            - it
            - en
            - fr
            - de
            - es
          description: Lingua del contenuto
        description:
          type: string
          description: Descrizione del contenuto
        annotations:
          type: array
          items:
            $ref: "#/components/schemas/Light3DAnnotation"
          description: Lista di annotazioni 3D associate al contenuto

      example:
        category: "Storia e contesto"
        content: "Lorem ipsum dolor sit amet, consectetur adipiscing elit."

    SennseImportPackage:
      type: object
      description: Pacchetto di import SENNSE con metadati, serie temporali e annotazioni.
      properties:
        timeStart:
          type: string
          format: date-time
        timeEnd:
          type: string
          format: date-time
        nomeOsservazione:
          type: string
        selectedMeasurePoints:
          type: string
          description: Punti di misura selezionati (stringa CSV)
        selectedMeasuresIds:
          type: string
          description: ID misure selezionate (stringa CSV)
        selectedWsnIds:
          type: string
          description: ID reti/sensori (stringa CSV)
        selectedWsn:
          type: array
          items:
            type: string
        selectedMeasures:
          type: array
          items:
            type: string
        data:
          type: array
          items:
            $ref: "#/components/schemas/SennseSeries"
        annotations:
          type: array
          items:
            $ref: "#/components/schemas/SennseAnnotation"
      required:
        - timeStart
        - timeEnd
        - data

    SennseSeries:
      type: object
      description: Serie di misure con valori [epochMillis, valore].
      properties:
        name:
          type: string
        values:
          type: array
          items:
            type: array
            minItems: 2
            maxItems: 2
            items:
              - type: integer
                description: Epoch millis
              - type: string
                description: Valore misurato (string per compatibilità)
      required:
        - name
        - values

    SennseAnnotation:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        user:
          type: string
        key:
          type: string
        value:
          type: string
      required:
        - timestamp
        - key
        - value

    ImportJob:
      type: object
      properties:
        id:
          type: string
        source:
          type: string
          example: "SENNSE"
        status:
          $ref: "#/components/schemas/ImportStatus"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        message:
          type: string
        errors:
          type: array
          items:
            type: string

    ImportStatus:
      type: string
      enum: [PENDING, RUNNING, COMPLETED, FAILED, CANCELED]

    Problem:
      type: object
      description: RFC7807 Problem Details
      properties:
        type:
          type: string
          format: uri
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
        instance:
          type: string
    SennseDataChunk:
      type: object
      description: Blocco incrementale di dati (una o più serie).
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/SennseSeries"
      required:
        - data

    SennseImportPatch:
      type: object
      description: Aggiornamento parziale dei metadati dell'import.
      properties:
        nomeOsservazione:
          type: string
        selectedMeasurePoints:
          type: string
          description: CSV
        selectedMeasuresIds:
          type: string
          description: CSV
        selectedWsnIds:
          type: string
          description: CSV
        selectedWsn:
          type: array
          items:
            type: string
        selectedMeasures:
          type: array
          items:
            type: string

    FinalizeRequest:
      type: object
      description: Opzioni per la finalizzazione del job (facoltative).
      properties:
        checksum:
          type: string
          description: Checksum atteso sull'insieme dati (per verifica di integrità).
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT token for authentication"
security:
  - bearerAuth: []
