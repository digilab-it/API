openapi: 3.0.0
info:
  title: Digilab API
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.mydomain.com/v1
tags:
  - name: authentication
    x-displayName: Autenticazione OAuth
    description: |
      L’API supporta il protocollo OAuth 2.0 per l’autenticazione e l’autorizzazione degli utenti, garantendo un accesso sicuro alle risorse protette. OAuth2 è un framework standard che consente alle applicazioni client di ottenere token di accesso senza esporre le credenziali degli utenti.

      **Flussi di Autenticazione Supportati**

      L’API implementa diversi flussi di autenticazione OAuth2 per adattarsi a diverse esigenze applicative:
        - Authorization Code Flow (raccomandato per applicazioni server-side)
        - Implicit Flow (per applicazioni client-side, sconsigliato per nuovi sviluppi)
        - Client Credentials Flow (per autenticazione tra servizi senza interazione utente)
        - Password Grant Flow (per applicazioni di prima parte che gestiscono direttamente le credenziali utente)
        - Device Authorization Flow (per dispositivi senza input diretto, come smart TV e IoT)

      **Endpoint di Autenticazione**

      L’API fornisce i seguenti endpoint per gestire il processo di autenticazione e autorizzazione:
        
        - **/token**: Ottieni un token di accesso ed un refresh token
        - **/authorize**: Ottieni un codice di autorizzazione per l’accesso a risorse protette
        - **/revoke**: Revoca un token di accesso o di aggiornamento
        - **/refresh**: Aggiorna un token di accesso
        - **/userinfo**: Ottieni informazioni sull’utente autenticato

      **Gestione dei Token**

      I token OAuth2 sono emessi come JWT (JSON Web Token) e hanno una durata configurabile. Per mantenere una sessione attiva, il client può utilizzare il refresh token per ottenere nuovi token di accesso senza richiedere nuovamente l’autenticazione dell’utente.

      **Sicurezza e Best Practices**

      - Utilizzare sempre HTTPS per tutte le richieste OAuth2
      - Conservare i token di accesso in modo sicuro (ad esempio, nell’header di autenticazione con Bearer Token)
  - name: tagManuscripts
    description: All Manuscripts related operations
    x-displayName: (draft) Manuscripts
  - name: tagManuscriptsTurtle
    description: Turtle Manuscripts
    x-displayName: (draft) Turtle Manuscripts
  - name: tagLocations
    x-displayName: (draft) Locations
    description: |
      ## Locations
      The locations API provides endpoints for managing locations in the Common Semantics Framework standard. Locations represent physical places where events, projects, and other resources are located.

      ### Search Parameters
      The locations API supports the following search parameters:
        - **id**: The ID of the location
        - **name**: The name of the location
        - **address**: The address of the location
        - **coordinates**: The coordinates of the location
        - **related_resource**: The related resources to include in the response

        **Examples**
        ```bash
        GET /locations/?coordinates=1.0,2.0
        GET /locations/?id=4fdaf83a-0953-4f8e-b5d1-dd50bdec6830,67daf83a-0953-4f8e-b5d1-dd50bdec6832,11daf811-0953-4f8e-b5d1-dd50bdec6811
        GET /locations/?related_resource=events,projects
        ```

  - name: tagPersons
    x-displayName: (draft) Persons
    description: All Persons related operations
  - name: tagProjects
    description: All Projects related operations
    x-displayName: (draft) Projects
  - name: tagEvents
    description: All Events related operations
    x-displayName: (draft) Events
  - name: Models
    x-displayName: (draft) Resource types
    description: |
      ## Base Entity
      <SchemaDefinition schemaRef="#/components/schemas/Base" />

      ## Location
      A location object extending the `Base Entity`
      <SchemaDefinition schemaRef="#/components/schemas/Location" />

      ## Person
      A person object extending the `Base Entity`
      <SchemaDefinition schemaRef="#/components/schemas/Person" />

      ## Project
      A project object extending the `Base Entity`
      <SchemaDefinition schemaRef="#/components/schemas/Project" />  

      ## Event
      An event object extending the `Base Entity`
      <SchemaDefinition schemaRef="#/components/schemas/Event" />  

      ## Manuscript
      A manuscript object extending the `Base Entity`
      <SchemaDefinition schemaRef="#/components/schemas/Manuscript" />
paths:
  /authorize:
    post:
      tags:
        - authentication
      summary: /authorize
      description: |
        Inizia il processo di autorizzazione OAuth2.
        Endpoint per ottenere il codice di autorizzazione.
      parameters:
        - name: response_type
          in: query
          required: true
          schema:
            type: string
            enum: [code]
          description: "Specifica il tipo di risposta richiesta. Tipicamente 'code' per Authorization Code Flow."
        - name: client_id
          in: query
          required: true
          schema:
            type: string
          description: "Identificativo univoco del client registrato."
        - name: redirect_uri
          in: query
          required: true
          schema:
            type: string
            format: uri
          description: "L'URI a cui verrà reindirizzato l'utente dopo l'autorizzazione. Deve corrispondere a un valore registrato."
        - name: scope
          in: query
          required: true
          schema:
            type: string
          description: "Permessi richiesti dall'applicazione. Devono essere separati da spazi."
        - name: state
          in: query
          required: false
          schema:
            type: string
          description: "Parametro utilizzato per prevenire attacchi CSRF e mantenere il contesto della sessione."
      responses:
        "302":
          description: Redirect all'URI di callback con il codice di autorizzazione

  /token:
    post:
      tags:
        - authentication
      summary: /token
      description: |
        Endpoint per scambiare il codice di autorizzazione con un token di accesso.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                [grant_type, client_id, client_secret, code, redirect_uri]
              properties:
                grant_type:
                  type: string
                  enum: [authorization_code]
                  description: "Tipo di grant richiesto. Deve essere 'authorization_code' per questo flusso."
                client_id:
                  type: string
                  description: "Identificativo univoco del client registrato."
                client_secret:
                  type: string
                  description: "Segreto del client per l'autenticazione. Non esporre mai questa informazione pubblicamente."
                code:
                  type: string
                  description: "Codice di autorizzazione ottenuto dall'endpoint /authorize."
                redirect_uri:
                  type: string
                  format: uri
                  description: "L'URI di reindirizzamento registrato usato nella richiesta iniziale."
      responses:
        "200":
          description: Token di accesso generato
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  token_type:
                    type: string
                    example: "Bearer"
                  expires_in:
                    type: integer
                  refresh_token:
                    type: string

  /revoke:
    post:
      tags:
        - authentication
      summary: /revoke
      description: "Endpoint per invalidare un token di accesso o refresh token. Utilizza POST per sicurezza."
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: [token]
              properties:
                token:
                  type: string
                  description: "Il token che deve essere revocato."
      responses:
        "200":
          description: Token revocato con successo

  /userinfo:
    get:
      tags:
        - authentication
      summary: /userinfo
      description: "Restituisce le informazioni dell'utente basate sul token di accesso fornito."
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Informazioni sull'utente
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  email:
                    type: string
  /locations:
    get:
      tags:
        - tagLocations
      operationId: getLocation
      summary: Get Locations
      description: Get all locations. This operation retrieves all the available locations in the standard.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Location"
              examples:
                example1:
                  value:
                    - id: "1"
                      name: "Location 1"
                      description: "Description 1"
                      address: "Address 1"
                      coordinates: [1.0, 2.0]
                    - id: "2"
                      name: "Location 2"
                      description: "Description 2"
                      address: "Address 2"
                      coordinates: [3.0, 4.0]
        "401":
          description: Unauthorized
    post:
      tags:
        - tagLocations
      operationId: createLocation
      summary: Create Location
      description: Create a new location with the specified details
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Location"
      responses:
        "201":
          description: Location created successfully
        "401":
          description: Unauthorized
  /locations/{id}:
    get:
      tags:
        - tagLocations
      operationId: getLocationById
      summary: Get Location by ID
      description: Get a specific location by its ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        "404":
          description: Location not found
        "401":
          description: Unauthorized
    put:
      tags:
        - tagLocations
      operationId: updateLocation
      summary: Update Location
      description: Update a location with new information
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Location"
      responses:
        "200":
          description: Location updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        "404":
          description: Location not found
        "401":
          description: Unauthorized
    patch:
      tags:
        - tagLocations
      operationId: patchLocation
      security:
        - bearerAuth: []
      summary: Patch Location
      description: partial update a location with new information
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Location"
      responses:
        "200":
          description: Location patched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        "404":
          description: Location not found
        "401":
          description: Unauthorized
    delete:
      tags:
        - tagLocations
      operationId: deleteLocation
      summary: Delete Location
      description: Delete a location. This operation deletes a specific location by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        "204":
          description: Location deleted successfully
        "404":
          description: Location not found
        "401":
          description: Unauthorized
  /persons:
    post:
      tags:
        - tagPersons
      operationId: createPerson
      summary: Create Person
      description: Create a new person with the given information
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Person"
      responses:
        "201":
          description: Person created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
    get:
      summary: Get persons
      tags:
        - tagPersons
      operationId: getPersons
      description: Get all persons from the standard
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of persons
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
  /persons/{id}:
    get:
      summary: Get a specific person
      tags:
        - tagPersons
      operationId: getPersonById
      description: Get a person by ID. This operation retrieves a specific person by their ID.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A person
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
        "404":
          description: Person not found
    put:
      summary: Replace a person by ID
      tags:
        - tagPersons
      operationId: replacePerson
      description: Replace a person by ID with new information
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Person"
      responses:
        "200":
          description: Person replaced
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
        "404":
          description: Person not found
    patch:
      summary: Patch a person by ID
      tags:
        - tagPersons
      operationId: patchPerson
      description: Update a person by ID. This operation updates a person's information based on their ID.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Person"
      responses:
        "200":
          description: Person updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
        "404":
          description: Person not found
    delete:
      summary: Delete a person by ID
      tags:
        - tagPersons
      operationId: deletePerson
      description: Delete a person by ID. This operation deletes a person from the standard based on their ID.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Person deleted
        "401":
          description: Unauthorized
        "404":
          description: Person not found
  /events:
    get:
      operationId: getEvents
      security:
        - bearerAuth: []
      tags:
        - tagEvents
      summary: Get all events
      description: This operation retrieves all events from the standard.
      responses:
        "200":
          description: A list of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
        "401":
          description: Unauthorized
    post:
      operationId: createEvent
      security:
        - bearerAuth: []
      tags:
        - tagEvents
      summary: Create a new event
      description: This operation creates a new event in the standard.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        "201":
          description: Event created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "401":
          description: Unauthorized
  /events/{id}:
    get:
      operationId: getEventById
      security:
        - bearerAuth: []
      tags:
        - tagEvents
      summary: Get an event by ID
      description: This operation retrieves an event from the standard based on its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: An event
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "401":
          description: Unauthorized
        "404":
          description: Event not found
    patch:
      operationId: patchEventById
      security:
        - bearerAuth: []
      tags:
        - tagEvents
      summary: Update an event by ID
      description: This operation updates an event in the standard based on its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        "200":
          description: Event updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "401":
          description: Unauthorized
        "404":
          description: Event not found
    delete:
      operationId: deleteEventById
      security:
        - bearerAuth: []
      tags:
        - tagEvents
      summary: Delete an event by ID
      description: This operation deletes an event from the standard based on its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Event deleted
        "401":
          description: Unauthorized
        "404":
          description: Event not found
    put:
      operationId: replaceEventById
      security:
        - bearerAuth: []
      tags:
        - tagEvents
      summary: Replace an event by ID
      description: This operation replaces an event in the standard based on its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        "200":
          description: Event replaced
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "401":
          description: Unauthorized
        "404":
          description: Event not found
  /projects:
    post:
      tags:
        - tagProjects
      summary: Create a new project
      description: This operation creates a new project in the standard.
      operationId: createProject
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"
      responses:
        "201":
          description: Project created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "401":
          description: Unauthorized
    get:
      tags:
        - tagProjects
      summary: Get all projects
      description: This operation retrieves all projects from the standard.
      operationId: getProjects
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"
        "401":
          description: Unauthorized
  /projects/{id}:
    get:
      tags:
        - tagProjects
      summary: Get a project by ID
      description: This operation retrieves a project from the standard based on its ID.
      operationId: getProjectById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A project
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "401":
          description: Unauthorized
        "404":
          description: Project not found
    patch:
      tags:
        - tagProjects
      summary: Update a project by ID
      description: This operation updates a project in the standard based on its ID.
      operationId: updateProject
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"
      responses:
        "200":
          description: Project updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "401":
          description: Unauthorized
        "404":
          description: Project not found
    delete:
      tags:
        - tagProjects
      summary: Delete a project by ID
      description: This operation deletes a project from the standard based on its ID.
      operationId: deleteProject
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Project deleted
        "401":
          description: Unauthorized
        "404":
          description: Project not found
    put:
      tags:
        - tagProjects
      summary: Replace a project by ID
      description: This operation replaces a project in the standard based on its ID.
      operationId: replaceProject
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"
      responses:
        "200":
          description: Project replaced
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "401":
          description: Unauthorized
        "404":
          description: Project not found
  /manuscripts:
    post:
      tags:
        - tagManuscripts
      summary: Create a new manuscript
      description: This operation creates a new manuscript in the standard.
      operationId: createManuscript
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Manuscript"
      responses:
        "201":
          description: Manuscript created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Manuscript"
        "401":
          description: Unauthorized
    get:
      tags:
        - tagManuscripts
      summary: Get all manuscripts
      description: This operation retrieves all manuscripts from the standard.
      operationId: getManuscripts
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of manuscripts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Manuscript"
        "401":
          description: Unauthorized
  /manuscripts/{id}:
    get:
      tags:
        - tagManuscripts
      summary: Get a manuscript by ID
      description: This operation retrieves a manuscript from the standard based on its ID.
      operationId: getManuscriptById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A manuscript
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Manuscript"
        "401":
          description: Unauthorized
        "404":
          description: Manuscript not found
    patch:
      tags:
        - tagManuscripts
      summary: Update a manuscript by ID
      description: This operation updates a manuscript in the standard based on its ID.
      operationId: updateManuscript
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Manuscript"
      responses:
        "200":
          description: Manuscript updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Manuscript"
        "401":
          description: Unauthorized
        "404":
          description: Manuscript not found
    delete:
      tags:
        - tagManuscripts
      summary: Delete a manuscript by ID
      description: This operation deletes a manuscript from the standard based on its ID.
      operationId: deleteManuscript
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Manuscript deleted
        "401":
          description: Unauthorized
        "404":
          description: Manuscript not found
    put:
      tags:
        - tagManuscripts
      summary: Replace a manuscript by ID
      description: This operation replaces a manuscript in the standard based on its ID.
      operationId: replaceManuscript
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Manuscript"
      responses:
        "200":
          description: Manuscript replaced
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Manuscript"
        "401":
          description: Unauthorized
        "404":
          description: Manuscript not found
  /turtle/manuscripts:
    post:
      tags:
        - tagManuscriptsTurtle
      summary: Crea un nuovo manoscritto
      operationId: createManuscriptTurtle
      security:
        - bearerAuth: []
      description: Aggiunge un nuovo manoscritto alla collezione.

      requestBody:
        required: true
        content:
          text/turtle:
            schema:
              $ref: "#/components/schemas/TurtleManuscript"
            example: |
              @prefix ex: <http://example.org/schema/> .

              <http://example.org/manuscripts/123> 
                  ex:title "Codex Vaticanus Updated" ;
                  ex:description "Una versione aggiornata del manoscritto" ;
                  ex:history <http://example.org/histories/updated-history>,
                            <http://example.org/histories/another-update> .

      responses:
        "201":
          description: Manuscript creato con successo
          content:
            application/json:
              example:
                message: "Manuscript creato con successo."
                id: "123"
        "401":
          description: Non autorizzato - Autenticazione richiesta
          content:
            application/json:
              example:
                error: "Unauthorized"
                message: "Token non valido o mancante."
        "403":
          description: Accesso negato - Permessi insufficienti
          content:
            application/json:
              example:
                error: "Forbidden"
                message: "Non hai i permessi per creare un manoscritto."

  /turtle/manuscripts/{id}:
    get:
      tags:
        - tagManuscriptsTurtle
      summary: Ottieni un manoscritto
      operationId: getManuscriptTurtle
      security:
        - bearerAuth: []
      description: Restituisce una risorsa Manuscript nel formato Turtle.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Dati del manoscritto in Turtle
          content:
            text/turtle:
              schema:
                $ref: "#/components/schemas/Manuscript"
              example: |
                @prefix ex: <http://example.org/schema/> .
                @prefix dcterms: <http://purl.org/dc/terms/> .

                <http://example.org/manuscripts/123> a ex:Manuscript ;
                    ex:title "Codex Vaticanus" ;
                    ex:description "Uno dei più antichi manoscritti della Bibbia" ;
                    ex:binding <http://example.org/bindings/leather-binding>,
                               <http://example.org/bindings/gold-embossed> ;
                    ex:extend <http://example.org/dimensions/25x30cm-800pages>,
                              <http://example.org/dimensions/folio-large> ;
                    ex:history <http://example.org/histories/vatican-discovery>,
                               <http://example.org/histories/medieval-restoration> ;
                    dcterms:bibliography <http://example.org/bibliographies/smith1990>,
                                        <http://example.org/bibliographies/jones2005> .
        "401":
          description: Non autorizzato - Autenticazione richiesta
          content:
            application/json:
              example:
                error: "Unauthorized"
                message: "Token non valido o mancante."
        "403":
          description: Accesso negato - Permessi insufficienti
          content:
            application/json:
              example:
                error: "Forbidden"
                message: "Non hai i permessi per accedere a questa risorsa."
        "404":
          description: Manuscript non trovato
          content:
            application/json:
              example:
                error: "Not Found"
                message: "Il manoscritto richiesto non esiste."

    put:
      tags:
        - tagManuscriptsTurtle
      summary: Aggiorna un manoscritto
      description: Sostituisce completamente un manoscritto esistente con una nuova versione.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      operationId: updateManuscriptTurtle
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          text/turtle:
            schema:
              $ref: "#/components/schemas/TurtleManuscript"
            example: |
              @prefix ex: <http://example.org/schema/> .

              <http://example.org/manuscripts/123> 
                  ex:title "Codex Vaticanus Updated" ;
                  ex:description "Una versione aggiornata del manoscritto" ;
                  ex:history <http://example.org/histories/updated-history>,
                            <http://example.org/histories/another-update> .

      responses:
        "200":
          description: Manuscript modificato con successo
          content:
            application/json:
              example:
                message: "Manuscript aggiornato con successo."
        "401":
          description: Non autorizzato - Autenticazione richiesta
          content:
            application/json:
              example:
                error: "Unauthorized"
                message: "Token non valido o mancante."
        "403":
          description: Accesso negato - Permessi insufficienti
          content:
            application/json:
              example:
                error: "Forbidden"
                message: "Non hai i permessi per modificare questo manoscritto."
        "404":
          description: Manuscript non trovato
          content:
            application/json:
              example:
                error: "Not Found"
                message: "Il manoscritto richiesto non esiste."

    patch:
      tags:
        - tagManuscriptsTurtle
      summary: Modifica parzialmente un manoscritto
      description: Aggiorna alcuni campi di un manoscritto esistente.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      operationId: patchManuscriptTurtle
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          text/turtle:
            schema:
              $ref: "#/components/schemas/TurtleManuscript"
            example: |
              @prefix ex: <http://example.org/schema/> .

              <http://example.org/manuscripts/123> 
                  ex:title "Codex Vaticanus Updated" ;
                  ex:description "Una versione aggiornata del manoscritto" ;
                  ex:history <http://example.org/histories/updated-history>,
                            <http://example.org/histories/another-update> .

      responses:
        "200":
          description: Manuscript modificato con successo
          content:
            application/json:
              example:
                message: "Manuscript aggiornato parzialmente con successo."
        "401":
          description: Non autorizzato - Autenticazione richiesta
          content:
            application/json:
              example:
                error: "Unauthorized"
                message: "Token non valido o mancante."
        "403":
          description: Accesso negato - Permessi insufficienti
          content:
            application/json:
              example:
                error: "Forbidden"
                message: "Non hai i permessi per modificare questo manoscritto."
        "404":
          description: Manuscript non trovato
          content:
            application/json:
              example:
                error: "Not Found"
                message: "Il manoscritto richiesto non esiste."

    delete:
      tags:
        - tagManuscriptsTurtle
      summary: Elimina un manoscritto
      description: Rimuove un manoscritto dalla collezione.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      operationId: deleteManuscriptTurtle
      security:
        - bearerAuth: []
      responses:
        "204":
          description: Manuscript eliminato con successo
        "401":
          description: Non autorizzato - Autenticazione richiesta
          content:
            application/json:
              example:
                error: "Unauthorized"
                message: "Token non valido o mancante."
        "403":
          description: Accesso negato - Permessi insufficienti
          content:
            application/json:
              example:
                error: "Forbidden"
                message: "Non hai i permessi per eliminare questo manoscritto."
        "404":
          description: Manuscript non trovato
          content:
            application/json:
              example:
                error: "Not Found"
                message: "Il manoscritto richiesto non esiste."

components:
  schemas:
    Resource:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        uri:
          type: string
    Identifier:
      type: object
      properties:
        type:
          type: string
        standard:
          type: string
        value:
          type: string
    Extension:
      type: object
      properties:
        uri:
          type: string
        value:
          type: string
    Base:
      type: object
      properties:
        id:
          type: string
        related_resources:
          type: array
          items:
            $ref: "#/components/schemas/Resource"
        identifiers:
          type: array
          items:
            $ref: "#/components/schemas/Identifier"
        extensions:
          type: array
          items:
            $ref: "#/components/schemas/Extension"
    Person:
      x-tags:
        - Model
      description: A person object
      allOf:
        - $ref: "#/components/schemas/Base"
      type: object
      properties:
        firstName:
          type: string
          description: The person's first name
        lastName:
          type: string
          description: The person's last name
        department:
          type: string
          description: The person's department
        birthDate:
          type: string
          format: date
          description: The person's birthDate
        deathDate:
          type: string
          format: date
          description: The person's deathDate
      required:
        - firstName
        - lastName
        - department
    Period:
      type: object
      properties:
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
      required:
        - start
    Project:
      allOf:
        - $ref: "#/components/schemas/Base"
      type: object
      properties:
        periods:
          type: object
          $ref: "#/components/schemas/Period"
    Location:
      allOf:
        - $ref: "#/components/schemas/Base"
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        address:
          type: string
        coordinates:
          type: array
          items:
            type: number
          minItems: 2
          maxItems: 2
    Event:
      allOf:
        - $ref: "#/components/schemas/Base"
      type: object
      properties:
        type:
          type: string
        Period:
          type: object
          $ref: "#/components/schemas/Period"
        Location:
          type: object
          $ref: "#/components/schemas/Location"
    Manuscript:
      allOf:
        - $ref: "#/components/schemas/Base"
      type: object
      properties:
        events:
          type: array
          items:
            $ref: "#/components/schemas/Event"
        projects:
          type: array
          items:
            $ref: "#/components/schemas/Project"
    TurtleManuscript:
      type: object
      properties:
        "@context":
          type: string
          example: "http://example.org/context"
        "@id":
          type: string
          format: uri
          example: "http://example.org/manuscripts/123"
        "@type":
          type: string
          example: "http://example.org/schema/Manuscript"
        title:
          type: string
          example: "Codex Vaticanus"
        description:
          type: string
          example: "Uno dei più antichi manoscritti della Bibbia"
        binding:
          type: array
          items:
            type: string
            format: uri
          example:
            - "http://example.org/bindings/leather-binding"
            - "http://example.org/bindings/gold-embossed"
        extend:
          type: array
          items:
            type: string
            format: uri
          example:
            - "http://example.org/dimensions/25x30cm-800pages"
            - "http://example.org/dimensions/folio-large"
        history:
          type: array
          items:
            type: string
            format: uri
          example:
            - "http://example.org/histories/vatican-discovery"
            - "http://example.org/histories/medieval-restoration"
        bibliography:
          type: array
          items:
            type: string
            format: uri
          example:
            - "http://example.org/bibliographies/smith1990"
            - "http://example.org/bibliographies/jones2005"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
