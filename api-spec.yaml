openapi: 3.0.0
info:
  title: Digilab API
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.mydomain.com/v1
tags:
  - name: Getting Started
    x-displayName: Getting Started
    description: |
      ## Getting Started
      Welcome to the Common Semantics Framework (**CSF**) API. This API provides access to the CSF standard, which is a digital library standard that allows users to manage and access digital resources such as manuscripts, events, projects, and locations. The API provides endpoints for creating, updating, and deleting resources, as well as for retrieving information about resources. To get started, you will need to obtain an authentication token by calling the `/token` endpoint with your email and password. Once you have obtained a token, you can use it to authenticate your requests to other endpoints in the API.

      ## Graph Querying
      CSF resources can have relationships with other resources through graph relationships as showen in the follow image. 
      ![graph](./images/getting_started/graph.png)

      The list of linked resources is available in the related_resource property. To retrieve information about the linked resources, you need to specify the related_resource parameter in your search query. For example, if you want to retrieve information about resource1 and resource2, your search query should include related_resource=resource1,resource2.

      The following api will return the data related with person 1 in the nodes locations and projects.
      ```bash
      GET /persons/1?related_resource=locations,projects
      ```
  - name: API - Authentication
    description: ## Authentication
      The authentication API provides endpoints for obtaining an authentication token that can be used to authenticate requests to other endpoints in the API.
  - name: API - Locations
    description: |
      ## Locations
      The locations API provides endpoints for managing locations in the Common Semantics Framework standard. Locations represent physical places where events, projects, and other resources are located.

      ### Search Parameters
      The locations API supports the following search parameters:
        - **id**: The ID of the location
        - **name**: The name of the location
        - **address**: The address of the location
        - **coordinates**: The coordinates of the location
        - **related_resource**: The related resources to include in the response

        **Examples**
        ```bash
        GET /locations/?coordinates=1.0,2.0
        GET /locations/?id=4fdaf83a-0953-4f8e-b5d1-dd50bdec6830,67daf83a-0953-4f8e-b5d1-dd50bdec6832,11daf811-0953-4f8e-b5d1-dd50bdec6811
        GET /locations/?related_resource=events,projects
        ```

  - name: API - Persons
    description: All Persons related operations
  - name: API - Projects
    description: All Projects related operations
  - name: API - Events
    description: All Events related operations
  - name: API - Manuscripts
    description: All Manuscripts related operations
  - name: Models
    x-displayName: Resource types
    description: |
      ## Base Entity
      <SchemaDefinition schemaRef="#/components/schemas/Base" />

      ## Location
      A location object extending the `Base Entity`
      <SchemaDefinition schemaRef="#/components/schemas/Location" />

      ## Person
      A person object extending the `Base Entity`
      <SchemaDefinition schemaRef="#/components/schemas/Person" />

      ## Project
      A project object extending the `Base Entity`
      <SchemaDefinition schemaRef="#/components/schemas/Project" />  

      ## Event
      An event object extending the `Base Entity`
      <SchemaDefinition schemaRef="#/components/schemas/Event" />  

      ## Manuscript
      A manuscript object extending the `Base Entity`
      <SchemaDefinition schemaRef="#/components/schemas/Manuscript" />
paths:
  /token:
    post:
      tags:
        - API - Authentication
      operationId: createToken
      summary: Token
      description: Obtain the authentication token to use in subsequent APIs.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "401":
          description: Invalid credentials
        "500":
          description: Server error
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
              examples:
                example1:
                  value:
                    token: "eyJhbGciOiJ****"
  /locations:
    get:
      tags:
        - API - Locations
      operationId: getLocation
      summary: Get Locations
      description: Get all locations. This operation retrieves all the available locations in the standard.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Location"
              examples:
                example1:
                  value:
                    - id: "1"
                      name: "Location 1"
                      description: "Description 1"
                      address: "Address 1"
                      coordinates: [1.0, 2.0]
                    - id: "2"
                      name: "Location 2"
                      description: "Description 2"
                      address: "Address 2"
                      coordinates: [3.0, 4.0]
        "401":
          description: Unauthorized
    post:
      tags:
        - API - Locations
      operationId: createLocation
      summary: Create Location
      description: Create a new location with the specified details
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Location"
      responses:
        "201":
          description: Location created successfully
        "401":
          description: Unauthorized
  /locations/{id}:
    get:
      tags:
        - API - Locations
      operationId: getLocationById
      summary: Get Location by ID
      description: Get a specific location by its ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        "404":
          description: Location not found
        "401":
          description: Unauthorized
    put:
      tags:
        - API - Locations
      operationId: updateLocation
      summary: Update Location
      description: Update a location with new information
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Location"
      responses:
        "200":
          description: Location updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        "404":
          description: Location not found
        "401":
          description: Unauthorized
    patch:
      tags:
        - API - Locations
      operationId: patchLocation
      security:
        - bearerAuth: []
      summary: Patch Location
      description: partial update a location with new information
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Location"
      responses:
        "200":
          description: Location patched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        "404":
          description: Location not found
        "401":
          description: Unauthorized
    delete:
      tags:
        - API - Locations
      operationId: deleteLocation
      summary: Delete Location
      description: Delete a location. This operation deletes a specific location by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        "204":
          description: Location deleted successfully
        "404":
          description: Location not found
        "401":
          description: Unauthorized
  /persons:
    post:
      tags:
        - API - Persons
      operationId: createPerson
      summary: Create Person
      description: Create a new person with the given information
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Person"
      responses:
        "201":
          description: Person created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
    get:
      summary: Get persons
      tags:
        - API - Persons
      operationId: getPersons
      description: Get all persons from the standard
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of persons
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
  /persons/{id}:
    get:
      summary: Get a specific person
      tags:
        - API - Persons
      operationId: getPersonById
      description: Get a person by ID. This operation retrieves a specific person by their ID.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A person
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
        "404":
          description: Person not found
    put:
      summary: Replace a person by ID
      tags:
        - API - Persons
      operationId: replacePerson
      description: Replace a person by ID with new information
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Person"
      responses:
        "200":
          description: Person replaced
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
        "404":
          description: Person not found
    patch:
      summary: Patch a person by ID
      tags:
        - API - Persons
      operationId: patchPerson
      description: Update a person by ID. This operation updates a person's information based on their ID.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Person"
      responses:
        "200":
          description: Person updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
        "404":
          description: Person not found
    delete:
      summary: Delete a person by ID
      tags:
        - API - Persons
      operationId: deletePerson
      description: Delete a person by ID. This operation deletes a person from the standard based on their ID.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Person deleted
        "401":
          description: Unauthorized
        "404":
          description: Person not found
  /events:
    get:
      operationId: getEvents
      security:
        - bearerAuth: []
      tags:
        - API - Events
      summary: Get all events
      description: This operation retrieves all events from the standard.
      responses:
        "200":
          description: A list of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
        "401":
          description: Unauthorized
    post:
      operationId: createEvent
      security:
        - bearerAuth: []
      tags:
        - API - Events
      summary: Create a new event
      description: This operation creates a new event in the standard.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        "201":
          description: Event created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "401":
          description: Unauthorized
  /events/{id}:
    get:
      operationId: getEventById
      security:
        - bearerAuth: []
      tags:
        - API - Events
      summary: Get an event by ID
      description: This operation retrieves an event from the standard based on its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: An event
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "401":
          description: Unauthorized
        "404":
          description: Event not found
    patch:
      operationId: patchEventById
      security:
        - bearerAuth: []
      tags:
        - API - Events
      summary: Update an event by ID
      description: This operation updates an event in the standard based on its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        "200":
          description: Event updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "401":
          description: Unauthorized
        "404":
          description: Event not found
    delete:
      operationId: deleteEventById
      security:
        - bearerAuth: []
      tags:
        - API - Events
      summary: Delete an event by ID
      description: This operation deletes an event from the standard based on its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Event deleted
        "401":
          description: Unauthorized
        "404":
          description: Event not found
    put:
      operationId: replaceEventById
      security:
        - bearerAuth: []
      tags:
        - API - Events
      summary: Replace an event by ID
      description: This operation replaces an event in the standard based on its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        "200":
          description: Event replaced
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "401":
          description: Unauthorized
        "404":
          description: Event not found
  /projects:
    post:
      tags:
        - API - Projects
      summary: Create a new project
      description: This operation creates a new project in the standard.
      operationId: createProject
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"
      responses:
        "201":
          description: Project created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "401":
          description: Unauthorized
    get:
      tags:
        - API - Projects
      summary: Get all projects
      description: This operation retrieves all projects from the standard.
      operationId: getProjects
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"
        "401":
          description: Unauthorized
  /projects/{id}:
    get:
      tags:
        - API - Projects
      summary: Get a project by ID
      description: This operation retrieves a project from the standard based on its ID.
      operationId: getProjectById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A project
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "401":
          description: Unauthorized
        "404":
          description: Project not found
    patch:
      tags:
        - API - Projects
      summary: Update a project by ID
      description: This operation updates a project in the standard based on its ID.
      operationId: updateProject
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"
      responses:
        "200":
          description: Project updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "401":
          description: Unauthorized
        "404":
          description: Project not found
    delete:
      tags:
        - API - Projects
      summary: Delete a project by ID
      description: This operation deletes a project from the standard based on its ID.
      operationId: deleteProject
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Project deleted
        "401":
          description: Unauthorized
        "404":
          description: Project not found
    put:
      tags:
        - API - Projects
      summary: Replace a project by ID
      description: This operation replaces a project in the standard based on its ID.
      operationId: replaceProject
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"
      responses:
        "200":
          description: Project replaced
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "401":
          description: Unauthorized
        "404":
          description: Project not found
  /manuscripts:
    post:
      tags:
        - API - Manuscripts
      summary: Create a new manuscript
      description: This operation creates a new manuscript in the standard.
      operationId: createManuscript
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Manuscript"
      responses:
        "201":
          description: Manuscript created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Manuscript"
        "401":
          description: Unauthorized
    get:
      tags:
        - API - Manuscripts
      summary: Get all manuscripts
      description: This operation retrieves all manuscripts from the standard.
      operationId: getManuscripts
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of manuscripts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Manuscript"
        "401":
          description: Unauthorized
  /manuscripts/{id}:
    get:
      tags:
        - API - Manuscripts
      summary: Get a manuscript by ID
      description: This operation retrieves a manuscript from the standard based on its ID.
      operationId: getManuscriptById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A manuscript
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Manuscript"
        "401":
          description: Unauthorized
        "404":
          description: Manuscript not found
    patch:
      tags:
        - API - Manuscripts
      summary: Update a manuscript by ID
      description: This operation updates a manuscript in the standard based on its ID.
      operationId: updateManuscript
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Manuscript"
      responses:
        "200":
          description: Manuscript updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Manuscript"
        "401":
          description: Unauthorized
        "404":
          description: Manuscript not found
    delete:
      tags:
        - API - Manuscripts
      summary: Delete a manuscript by ID
      description: This operation deletes a manuscript from the standard based on its ID.
      operationId: deleteManuscript
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Manuscript deleted
        "401":
          description: Unauthorized
        "404":
          description: Manuscript not found
    put:
      tags:
        - API - Manuscripts
      summary: Replace a manuscript by ID
      description: This operation replaces a manuscript in the standard based on its ID.
      operationId: replaceManuscript
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Manuscript"
      responses:
        "200":
          description: Manuscript replaced
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Manuscript"
        "401":
          description: Unauthorized
        "404":
          description: Manuscript not found

components:
  schemas:
    Resource:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        uri:
          type: string
    Identifier:
      type: object
      properties:
        type:
          type: string
        standard:
          type: string
        value:
          type: string
    Extension:
      type: object
      properties:
        uri:
          type: string
        value:
          type: string
    Base:
      type: object
      properties:
        id:
          type: string
        related_resources:
          type: array
          items:
            $ref: "#/components/schemas/Resource"
        identifiers:
          type: array
          items:
            $ref: "#/components/schemas/Identifier"
        extensions:
          type: array
          items:
            $ref: "#/components/schemas/Extension"
    Person:
      x-tags:
        - Model
      description: A person object
      allOf:
        - $ref: "#/components/schemas/Base"
      type: object
      properties:
        firstName:
          type: string
          description: The person's first name
        lastName:
          type: string
          description: The person's last name
        department:
          type: string
          description: The person's department
        birthDate:
          type: string
          format: date
          description: The person's birthDate
        deathDate:
          type: string
          format: date
          description: The person's deathDate
      required:
        - firstName
        - lastName
        - department
    Period:
      type: object
      properties:
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
      required:
        - start
    Project:
      allOf:
        - $ref: "#/components/schemas/Base"
      type: object
      properties:
        periods:
          type: object
          $ref: "#/components/schemas/Period"
    Location:
      allOf:
        - $ref: "#/components/schemas/Base"
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        address:
          type: string
        coordinates:
          type: array
          items:
            type: number
          minItems: 2
          maxItems: 2
    Event:
      allOf:
        - $ref: "#/components/schemas/Base"
      type: object
      properties:
        type:
          type: string
        Period:
          type: object
          $ref: "#/components/schemas/Period"
        Location:
          type: object
          $ref: "#/components/schemas/Location"
    Manuscript:
      allOf:
        - $ref: "#/components/schemas/Base"
      type: object
      properties:
        events:
          type: array
          items:
            $ref: "#/components/schemas/Event"
        projects:
          type: array
          items:
            $ref: "#/components/schemas/Project"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
