openapi: 3.0.0
info:
  title: Digilab API
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.mydomain.com/v1
paths:
  /token:
    post:
      operationId: createToken
      summary: Token
      description: Obtain the authentication token to use in subsequent APIs.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "401":
          description: Invalid credentials
        "500":
          description: Server error
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
              examples:
                example1:
                  value:
                    token: "eyJhbGciOiJ****"
  /locations:
    get:
      tags:
        - Locations
      operationId: getLocation
      summary: Get Locations
      description: Get all locations. This operation retrieves all the available locations in the system.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Location"
              examples:
                example1:
                  value:
                    - id: "1"
                      name: "Location 1"
                      description: "Description 1"
                      address: "Address 1"
                      coordinates: [1.0, 2.0]
                    - id: "2"
                      name: "Location 2"
                      description: "Description 2"
                      address: "Address 2"
                      coordinates: [3.0, 4.0]
        "401":
          description: Unauthorized
    post:
      tags:
        - Locations
      operationId: createLocation
      summary: Create Location
      description: Create a new location with the specified details
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Location"
      responses:
        "201":
          description: Location created successfully
        "401":
          description: Unauthorized
  /locations/{id}:
    get:
      tags:
        - Locations
      operationId: getLocationById
      summary: Get Location by ID
      description: Get a specific location by its ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        "404":
          description: Location not found
        "401":
          description: Unauthorized
    put:
      tags:
        - Locations
      operationId: updateLocation
      summary: Update Location
      description: Update a location with new information
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Location"
      responses:
        "200":
          description: Location updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        "404":
          description: Location not found
        "401":
          description: Unauthorized
    patch:
      tags:
        - Locations
      operationId: patchLocation
      security:
        - bearerAuth: []
      summary: Patch Location
      description: partial update a location with new information
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Location"
      responses:
        "200":
          description: Location patched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        "404":
          description: Location not found
        "401":
          description: Unauthorized
    delete:
      tags:
        - Locations
      operationId: deleteLocation
      summary: Delete Location
      description: Delete a location. This operation deletes a specific location by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        "204":
          description: Location deleted successfully
        "404":
          description: Location not found
        "401":
          description: Unauthorized
  /persons:
    post:
      tags:
        - Persons
      operationId: createPerson
      summary: Create Person
      description: Create a new person with the given information
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Person"
      responses:
        "201":
          description: Person created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
    get:
      summary: Get persons
      tags:
        - Persons
      operationId: getPersons
      description: Get all persons from the system
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of persons
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
  /persons/{id}:
    get:
      summary: Get a specific person
      tags:
        - Persons
      operationId: getPersonById
      description: Get a person by ID. This operation retrieves a specific person by their ID.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A person
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
        "404":
          description: Person not found
    put:
      summary: Replace a person by ID
      tags:
        - Persons
      operationId: replacePerson
      description: Replace a person by ID with new information
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Person"
      responses:
        "200":
          description: Person replaced
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
        "404":
          description: Person not found
    patch:
      summary: Patch a person by ID
      tags:
        - Persons
      operationId: patchPerson
      description: Update a person by ID. This operation updates a person's information based on their ID.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Person"
      responses:
        "200":
          description: Person updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
        "404":
          description: Person not found
    delete:
      summary: Delete a person by ID
      tags:
        - Persons
      operationId: deletePerson
      description: Delete a person by ID. This operation deletes a person from the system based on their ID.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Person deleted
        "401":
          description: Unauthorized
        "404":
          description: Person not found
  /events:
    get:
      operationId: getEvents
      security:
        - bearerAuth: []
      tags:
        - Events
      summary: Get all events
      description: This operation retrieves all events from the system.
      responses:
        "200":
          description: A list of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
        "401":
          description: Unauthorized
    post:
      operationId: createEvent
      security:
        - bearerAuth: []
      tags:
        - Events
      summary: Create a new event
      description: This operation creates a new event in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        "201":
          description: Event created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "401":
          description: Unauthorized
  /events/{id}:
    get:
      operationId: getEventById
      security:
        - bearerAuth: []
      tags:
        - Events
      summary: Get an event by ID
      description: This operation retrieves an event from the system based on its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: An event
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "401":
          description: Unauthorized
        "404":
          description: Event not found
    patch:
      operationId: patchEventById
      security:
        - bearerAuth: []
      tags:
        - Events
      summary: Update an event by ID
      description: This operation updates an event in the system based on its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        "200":
          description: Event updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "401":
          description: Unauthorized
        "404":
          description: Event not found
    delete:
      operationId: deleteEventById
      security:
        - bearerAuth: []
      tags:
        - Events
      summary: Delete an event by ID
      description: This operation deletes an event from the system based on its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Event deleted
        "401":
          description: Unauthorized
        "404":
          description: Event not found
    put:
      operationId: replaceEventById
      security:
        - bearerAuth: []
      tags:
        - Events
      summary: Replace an event by ID
      description: This operation replaces an event in the system based on its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        "200":
          description: Event replaced
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "401":
          description: Unauthorized
        "404":
          description: Event not found
  /projects:
    post:
      tags:
        - Projects
      summary: Create a new project
      description: This operation creates a new project in the system.
      operationId: createProject
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"
      responses:
        "201":
          description: Project created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "401":
          description: Unauthorized
    get:
      tags:
        - Projects
      summary: Get all projects
      description: This operation retrieves all projects from the system.
      operationId: getProjects
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"
        "401":
          description: Unauthorized
  /projects/{id}:
    get:
      tags:
        - Projects
      summary: Get a project by ID
      description: This operation retrieves a project from the system based on its ID.
      operationId: getProjectById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A project
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "401":
          description: Unauthorized
        "404":
          description: Project not found
    patch:
      tags:
        - Projects
      summary: Update a project by ID
      description: This operation updates a project in the system based on its ID.
      operationId: updateProject
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"
      responses:
        "200":
          description: Project updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "401":
          description: Unauthorized
        "404":
          description: Project not found
    delete:
      tags:
        - Projects
      summary: Delete a project by ID
      description: This operation deletes a project from the system based on its ID.
      operationId: deleteProject
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Project deleted
        "401":
          description: Unauthorized
        "404":
          description: Project not found
    put:
      tags:
        - Projects
      summary: Replace a project by ID
      description: This operation replaces a project in the system based on its ID.
      operationId: replaceProject
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"
      responses:
        "200":
          description: Project replaced
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "401":
          description: Unauthorized
        "404":
          description: Project not found
  /manuscripts:
    post:
      tags:
        - Manuscripts
      summary: Create a new manuscript
      description: This operation creates a new manuscript in the system.
      operationId: createManuscript
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Manuscript"
      responses:
        "201":
          description: Manuscript created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Manuscript"
        "401":
          description: Unauthorized
    get:
      tags:
        - Manuscripts
      summary: Get all manuscripts
      description: This operation retrieves all manuscripts from the system.
      operationId: getManuscripts
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of manuscripts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Manuscript"
        "401":
          description: Unauthorized
  /manuscripts/{id}:
    get:
      tags:
        - Manuscripts
      summary: Get a manuscript by ID
      description: This operation retrieves a manuscript from the system based on its ID.
      operationId: getManuscriptById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A manuscript
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Manuscript"
        "401":
          description: Unauthorized
        "404":
          description: Manuscript not found
    patch:
      tags:
        - Manuscripts
      summary: Update a manuscript by ID
      description: This operation updates a manuscript in the system based on its ID.
      operationId: updateManuscript
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Manuscript"
      responses:
        "200":
          description: Manuscript updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Manuscript"
        "401":
          description: Unauthorized
        "404":
          description: Manuscript not found
    delete:
      tags:
        - Manuscripts
      summary: Delete a manuscript by ID
      description: This operation deletes a manuscript from the system based on its ID.
      operationId: deleteManuscript
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Manuscript deleted
        "401":
          description: Unauthorized
        "404":
          description: Manuscript not found
    put:
      tags:
        - Manuscripts
      summary: Replace a manuscript by ID
      description: This operation replaces a manuscript in the system based on its ID.
      operationId: replaceManuscript
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Manuscript"
      responses:
        "200":
          description: Manuscript replaced
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Manuscript"
        "401":
          description: Unauthorized
        "404":
          description: Manuscript not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Person:
      type: object
      properties:
        id:
          type: string
        extensions:
          type: array
          items:
            $ref: "#/components/schemas/Extension"
        identifiers:
          type: array
          items:
            $ref: "#/components/schemas/Identifier"
        firstName:
          type: string
        lastName:
          type: string
        department:
          type: string
        birthDate:
          type: string
          format: date
        deathDate:
          type: string
          format: date
      required:
        - firstName
        - lastName
        - department
    Period:
      type: object
      properties:
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
      required:
        - start
    Project:
      type: object
      properties:
        id:
          type: string
        identifiers:
          type: array
          items:
            $ref: "#/components/schemas/Identifier"
        name:
          type: string
        description:
          type: string
        team:
          type: array
          items:
            $ref: "#/components/schemas/Person"
        periods:
          type: object
          $ref: "#/components/schemas/Period"
    Location:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        extensions:
          type: array
          items:
            $ref: "#/components/schemas/Extension"
        identifiers:
          type: array
          items:
            $ref: "#/components/schemas/Identifier"
        description:
          type: string
        address:
          type: string
        coordinates:
          type: array
          items:
            type: number
          minItems: 2
          maxItems: 2
    Event:
      type: object
      properties:
        id:
          type: string
        extensions:
          type: array
          items:
            $ref: "#/components/schemas/Extension"
        identifiers:
          type: array
          items:
            $ref: "#/components/schemas/Identifier"
        type:
          type: string
        Period:
          type: object
          $ref: "#/components/schemas/Period"
        Location:
          type: object
          $ref: "#/components/schemas/Location"
    Manuscript:
      type: object
      properties:
        id:
          type: string
        extensions:
          type: array
          items:
            $ref: "#/components/schemas/Extension"
        identifiers:
          type: array
          items:
            $ref: "#/components/schemas/Identifier"
        events:
          type: array
          items:
            $ref: "#/components/schemas/Event"
        projects:
          type: array
          $ref: "#/components/schemas/Project"
    Identifier:
      type: object
      properties:
        type:
          type: string
        system:
          type: string
        value:
          type: string
    Extension:
      type: object
      properties:
        uri:
          type: string
        value:
          type: string
